
Tugas Pemkon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080053b4  080053b4  000063b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005524  08005524  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005524  08005524  00006524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800552c  0800552c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800552c  0800552c  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005530  08005530  00006530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005534  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c6c  2000005c  08005590  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cc8  08005590  00007cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c946  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a2  00000000  00000000  000139d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00015a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089b  00000000  00000000  00016598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221ef  00000000  00000000  00016e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010020  00000000  00000000  00039022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd29  00000000  00000000  00049042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003218  00000000  00000000  00114db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00117fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800539c 	.word	0x0800539c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800539c 	.word	0x0800539c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Max30102_WriteReg>:
}MAX30102_STATE;

MAX30102_STATE StateMachine;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af04      	add	r7, sp, #16
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <Max30102_WriteReg+0x40>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	b29a      	uxth	r2, r3
 8000604:	2301      	movs	r3, #1
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2301      	movs	r3, #1
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	1dbb      	adds	r3, r7, #6
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	21ae      	movs	r1, #174	@ 0xae
 8000614:	f002 f9d4 	bl	80029c0 <HAL_I2C_Mem_Write>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <Max30102_WriteReg+0x36>
		return MAX30102_OK;
 800061e:	2301      	movs	r3, #1
 8000620:	e000      	b.n	8000624 <Max30102_WriteReg+0x38>
	return MAX30102_ERROR;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000078 	.word	0x20000078

08000630 <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af04      	add	r7, sp, #16
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <Max30102_ReadReg+0x3c>)
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	b29a      	uxth	r2, r3
 8000644:	2301      	movs	r3, #1
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	2301      	movs	r3, #1
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	21ae      	movs	r1, #174	@ 0xae
 8000654:	f002 faae 	bl	8002bb4 <HAL_I2C_Mem_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d101      	bne.n	8000662 <Max30102_ReadReg+0x32>
		return MAX30102_OK;
 800065e:	2301      	movs	r3, #1
 8000660:	e000      	b.n	8000664 <Max30102_ReadReg+0x34>
	return MAX30102_ERROR;
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000078 	.word	0x20000078

08000670 <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	460b      	mov	r3, r1
 800067c:	71bb      	strb	r3, [r7, #6]
 800067e:	4613      	mov	r3, r2
 8000680:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 8000682:	f107 020f 	add.w	r2, r7, #15
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ffd0 	bl	8000630 <Max30102_ReadReg>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d001      	beq.n	800069a <Max30102_WriteRegisterBit+0x2a>
		return MAX30102_ERROR;
 8000696:	2300      	movs	r3, #0
 8000698:	e025      	b.n	80006e6 <Max30102_WriteRegisterBit+0x76>
	tmp &= ~(1<<Bit);
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	2201      	movs	r2, #1
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	43db      	mvns	r3, r3
 80006a6:	b25a      	sxtb	r2, r3
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	4013      	ands	r3, r2
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x01)<<Bit;
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	f003 0201 	and.w	r2, r3, #1
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	b25a      	sxtb	r2, r3
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 80006ce:	7bfa      	ldrb	r2, [r7, #15]
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff89 	bl	80005ec <Max30102_WriteReg>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d001      	beq.n	80006e4 <Max30102_WriteRegisterBit+0x74>
		return MAX30102_ERROR;
 80006e0:	2300      	movs	r3, #0
 80006e2:	e000      	b.n	80006e6 <Max30102_WriteRegisterBit+0x76>

	return MAX30102_OK;
 80006e4:	2301      	movs	r3, #1
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <Max30102_SetIntAlmostFullEnabled>:

//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	461a      	mov	r2, r3
 80006fc:	2107      	movs	r1, #7
 80006fe:	2002      	movs	r0, #2
 8000700:	f7ff ffb6 	bl	8000670 <Max30102_WriteRegisterBit>
 8000704:	4603      	mov	r3, r0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Max30102_SetIntFifoDataReadyEnabled>:

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	461a      	mov	r2, r3
 800071c:	2106      	movs	r1, #6
 800071e:	2002      	movs	r0, #2
 8000720:	f7ff ffa6 	bl	8000670 <Max30102_WriteRegisterBit>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR,(Address & 0x1F)))  //FIFO_WR_PTR[4:0]
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 031f 	and.w	r3, r3, #31
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	2004      	movs	r0, #4
 8000744:	f7ff ff52 	bl	80005ec <Max30102_WriteReg>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d001      	beq.n	8000752 <Max30102_FifoWritePointer+0x24>
			return MAX30102_ERROR;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <Max30102_FifoWritePointer+0x26>
	return MAX30102_OK;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER,(Address & 0x1F)))  //OVF_COUNTER[4:0]
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4619      	mov	r1, r3
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff3b 	bl	80005ec <Max30102_WriteReg>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d001      	beq.n	8000780 <Max30102_FifoOverflowCounter+0x24>
			return MAX30102_ERROR;
 800077c:	2300      	movs	r3, #0
 800077e:	e000      	b.n	8000782 <Max30102_FifoOverflowCounter+0x26>
	return MAX30102_OK;
 8000780:	2301      	movs	r3, #1
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR,(Address & 0x1F)))  //FIFO_RD_PTR[4:0]
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 031f 	and.w	r3, r3, #31
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	2006      	movs	r0, #6
 80007a0:	f7ff ff24 	bl	80005ec <Max30102_WriteReg>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d001      	beq.n	80007ae <Max30102_FifoReadPointer+0x24>
			return MAX30102_ERROR;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <Max30102_FifoReadPointer+0x26>
	return MAX30102_OK;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 80007c2:	f107 030f 	add.w	r3, r7, #15
 80007c6:	4619      	mov	r1, r3
 80007c8:	2008      	movs	r0, #8
 80007ca:	f7ff ff31 	bl	8000630 <Max30102_ReadReg>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d001      	beq.n	80007d8 <Max30102_FifoSampleAveraging+0x20>
		return MAX30102_ERROR;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e019      	b.n	800080c <Max30102_FifoSampleAveraging+0x54>
	tmp &= ~(0x07);
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f023 0307 	bic.w	r3, r3, #7
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x07)<<5;
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	015b      	lsls	r3, r3, #5
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	4619      	mov	r1, r3
 80007fa:	2008      	movs	r0, #8
 80007fc:	f7ff fef6 	bl	80005ec <Max30102_WriteReg>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d001      	beq.n	800080a <Max30102_FifoSampleAveraging+0x52>
		return MAX30102_ERROR;
 8000806:	2300      	movs	r3, #0
 8000808:	e000      	b.n	800080c <Max30102_FifoSampleAveraging+0x54>

	return MAX30102_OK;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	2104      	movs	r1, #4
 800082a:	2008      	movs	r0, #8
 800082c:	f7ff ff20 	bl	8000670 <Max30102_WriteRegisterBit>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <Max30102_FifoAlmostFullValue>:

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	if(Value < 17) Value = 17;
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b10      	cmp	r3, #16
 8000848:	d801      	bhi.n	800084e <Max30102_FifoAlmostFullValue+0x14>
 800084a:	2311      	movs	r3, #17
 800084c:	71fb      	strb	r3, [r7, #7]
	if(Value > 32) Value = 32;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b20      	cmp	r3, #32
 8000852:	d901      	bls.n	8000858 <Max30102_FifoAlmostFullValue+0x1e>
 8000854:	2320      	movs	r3, #32
 8000856:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f1c3 0320 	rsb	r3, r3, #32
 800085e:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8000860:	f107 030f 	add.w	r3, r7, #15
 8000864:	4619      	mov	r1, r3
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff fee2 	bl	8000630 <Max30102_ReadReg>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d001      	beq.n	8000876 <Max30102_FifoAlmostFullValue+0x3c>
		return MAX30102_ERROR;
 8000872:	2300      	movs	r3, #0
 8000874:	e01a      	b.n	80008ac <Max30102_FifoAlmostFullValue+0x72>
	tmp &= ~(0x0F);
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	f023 030f 	bic.w	r3, r3, #15
 800087c:	b2db      	uxtb	r3, r3
 800087e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	b25a      	sxtb	r2, r3
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	b25b      	sxtb	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b25b      	sxtb	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	4619      	mov	r1, r3
 800089a:	2008      	movs	r0, #8
 800089c:	f7ff fea6 	bl	80005ec <Max30102_WriteReg>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d001      	beq.n	80008aa <Max30102_FifoAlmostFullValue+0x70>
		return MAX30102_ERROR;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <Max30102_FifoAlmostFullValue+0x72>

	return MAX30102_OK;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <Max30102_Reset>:
{
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT, (Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 80008ba:	23ff      	movs	r3, #255	@ 0xff
 80008bc:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 80008be:	2140      	movs	r1, #64	@ 0x40
 80008c0:	2009      	movs	r0, #9
 80008c2:	f7ff fe93 	bl	80005ec <Max30102_WriteReg>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d001      	beq.n	80008d0 <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 80008cc:	2300      	movs	r3, #0
 80008ce:	e00f      	b.n	80008f0 <Max30102_Reset+0x3c>
    do
    {
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	4619      	mov	r1, r3
 80008d4:	2009      	movs	r0, #9
 80008d6:	f7ff feab 	bl	8000630 <Max30102_ReadReg>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d001      	beq.n	80008e4 <Max30102_Reset+0x30>
    		return MAX30102_ERROR;
 80008e0:	2300      	movs	r3, #0
 80008e2:	e005      	b.n	80008f0 <Max30102_Reset+0x3c>
    } while(tmp & (1<<6));
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f0      	bne.n	80008d0 <Max30102_Reset+0x1c>

    return MAX30102_OK;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8000902:	f107 030f 	add.w	r3, r7, #15
 8000906:	4619      	mov	r1, r3
 8000908:	2009      	movs	r0, #9
 800090a:	f7ff fe91 	bl	8000630 <Max30102_ReadReg>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d001      	beq.n	8000918 <Max30102_SetMode+0x20>
		return MAX30102_ERROR;
 8000914:	2300      	movs	r3, #0
 8000916:	e01a      	b.n	800094e <Max30102_SetMode+0x56>
	tmp &= ~(0x07);
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	f023 0307 	bic.w	r3, r3, #7
 800091e:	b2db      	uxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	b25a      	sxtb	r2, r3
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	b25b      	sxtb	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b25b      	sxtb	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	4619      	mov	r1, r3
 800093c:	2009      	movs	r0, #9
 800093e:	f7ff fe55 	bl	80005ec <Max30102_WriteReg>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d001      	beq.n	800094c <Max30102_SetMode+0x54>
		return MAX30102_ERROR;
 8000948:	2300      	movs	r3, #0
 800094a:	e000      	b.n	800094e <Max30102_SetMode+0x56>

	return MAX30102_OK;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b084      	sub	sp, #16
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8000960:	f107 030f 	add.w	r3, r7, #15
 8000964:	4619      	mov	r1, r3
 8000966:	200a      	movs	r0, #10
 8000968:	f7ff fe62 	bl	8000630 <Max30102_ReadReg>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d001      	beq.n	8000976 <Max30102_SpO2AdcRange+0x20>
		return MAX30102_ERROR;
 8000972:	2300      	movs	r3, #0
 8000974:	e01c      	b.n	80009b0 <Max30102_SpO2AdcRange+0x5a>
	tmp &= ~(0x03);
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	f023 0303 	bic.w	r3, r3, #3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	015b      	lsls	r3, r3, #5
 8000986:	b25b      	sxtb	r3, r3
 8000988:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800098c:	b25a      	sxtb	r2, r3
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	b25b      	sxtb	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b25b      	sxtb	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	4619      	mov	r1, r3
 800099e:	200a      	movs	r0, #10
 80009a0:	f7ff fe24 	bl	80005ec <Max30102_WriteReg>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d001      	beq.n	80009ae <Max30102_SpO2AdcRange+0x58>
		return MAX30102_ERROR;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <Max30102_SpO2AdcRange+0x5a>

	return MAX30102_OK;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80009c2:	f107 030f 	add.w	r3, r7, #15
 80009c6:	4619      	mov	r1, r3
 80009c8:	200a      	movs	r0, #10
 80009ca:	f7ff fe31 	bl	8000630 <Max30102_ReadReg>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d001      	beq.n	80009d8 <Max30102_SpO2SampleRate+0x20>
		return MAX30102_ERROR;
 80009d4:	2300      	movs	r3, #0
 80009d6:	e01c      	b.n	8000a12 <Max30102_SpO2SampleRate+0x5a>
	tmp &= ~(0x07);
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	f023 0307 	bic.w	r3, r3, #7
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	f003 031c 	and.w	r3, r3, #28
 80009ee:	b25a      	sxtb	r2, r3
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	4619      	mov	r1, r3
 8000a00:	200a      	movs	r0, #10
 8000a02:	f7ff fdf3 	bl	80005ec <Max30102_WriteReg>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d001      	beq.n	8000a10 <Max30102_SpO2SampleRate+0x58>
		return MAX30102_ERROR;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e000      	b.n	8000a12 <Max30102_SpO2SampleRate+0x5a>

	return MAX30102_OK;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8000a24:	f107 030f 	add.w	r3, r7, #15
 8000a28:	4619      	mov	r1, r3
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f7ff fe00 	bl	8000630 <Max30102_ReadReg>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d001      	beq.n	8000a3a <Max30102_SpO2LedPulseWidth+0x20>
		return MAX30102_ERROR;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e01a      	b.n	8000a70 <Max30102_SpO2LedPulseWidth+0x56>
	tmp &= ~(0x03);
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	f023 0303 	bic.w	r3, r3, #3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	b25a      	sxtb	r2, r3
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f7ff fdc4 	bl	80005ec <Max30102_WriteReg>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d001      	beq.n	8000a6e <Max30102_SpO2LedPulseWidth+0x54>
		return MAX30102_ERROR;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <Max30102_SpO2LedPulseWidth+0x56>

	return MAX30102_OK;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <Max30102_Led1PulseAmplitude>:
//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4619      	mov	r1, r3
 8000a86:	200c      	movs	r0, #12
 8000a88:	f7ff fdb0 	bl	80005ec <Max30102_WriteReg>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d001      	beq.n	8000a96 <Max30102_Led1PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <Max30102_Led1PulseAmplitude+0x20>
	return MAX30102_OK;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4619      	mov	r1, r3
 8000aae:	200d      	movs	r0, #13
 8000ab0:	f7ff fd9c 	bl	80005ec <Max30102_WriteReg>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d001      	beq.n	8000abe <Max30102_Led2PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <Max30102_Led2PulseAmplitude+0x20>
	return MAX30102_OK;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <Max30102_GetHeartRate>:
{
	return IsFingerOnScreen;
}

int32_t Max30102_GetHeartRate(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	return HeartRate;
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <Max30102_GetHeartRate+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20001354 	.word	0x20001354

08000ae0 <Max30102_GetSpO2Value>:

int32_t Max30102_GetSpO2Value(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
	return Sp02Value;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <Max30102_GetSpO2Value+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000134c 	.word	0x2000134c

08000af8 <Max30102_Task>:

void Max30102_Task(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af04      	add	r7, sp, #16
	switch(StateMachine)
 8000afe:	4b4d      	ldr	r3, [pc, #308]	@ (8000c34 <Max30102_Task+0x13c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	f200 8092 	bhi.w	8000c2c <Max30102_Task+0x134>
 8000b08:	a201      	add	r2, pc, #4	@ (adr r2, 8000b10 <Max30102_Task+0x18>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b59 	.word	0x08000b59
 8000b18:	08000b89 	.word	0x08000b89
 8000b1c:	08000bf5 	.word	0x08000bf5
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 8000b20:	4b45      	ldr	r3, [pc, #276]	@ (8000c38 <Max30102_Task+0x140>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
			Sp02Value = 0;
 8000b26:	4b45      	ldr	r3, [pc, #276]	@ (8000c3c <Max30102_Task+0x144>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
			if(IsFingerOnScreen)
 8000b2c:	4b44      	ldr	r3, [pc, #272]	@ (8000c40 <Max30102_Task+0x148>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d075      	beq.n	8000c22 <Max30102_Task+0x12a>
			{
				CollectedSamples = 0;
 8000b36:	4b43      	ldr	r3, [pc, #268]	@ (8000c44 <Max30102_Task+0x14c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
				BufferTail = BufferHead;
 8000b3c:	4b42      	ldr	r3, [pc, #264]	@ (8000c48 <Max30102_Task+0x150>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a42      	ldr	r2, [pc, #264]	@ (8000c4c <Max30102_Task+0x154>)
 8000b42:	6013      	str	r3, [r2, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8000b44:	2024      	movs	r0, #36	@ 0x24
 8000b46:	f7ff ff97 	bl	8000a78 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 8000b4a:	2024      	movs	r0, #36	@ 0x24
 8000b4c:	f7ff ffa8 	bl	8000aa0 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 8000b50:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <Max30102_Task+0x13c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b56:	e064      	b.n	8000c22 <Max30102_Task+0x12a>

		case MAX30102_STATE_CALIBRATE:
				if(IsFingerOnScreen)
 8000b58:	4b39      	ldr	r3, [pc, #228]	@ (8000c40 <Max30102_Task+0x148>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d008      	beq.n	8000b74 <Max30102_Task+0x7c>
				{
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8000b62:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <Max30102_Task+0x14c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b6a:	d95c      	bls.n	8000c26 <Max30102_Task+0x12e>
					{
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000b6c:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <Max30102_Task+0x13c>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	701a      	strb	r2, [r3, #0]
				{
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
					StateMachine = MAX30102_STATE_BEGIN;
				}
			break;
 8000b72:	e058      	b.n	8000c26 <Max30102_Task+0x12e>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff ff7f 	bl	8000a78 <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff ff90 	bl	8000aa0 <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 8000b80:	4b2c      	ldr	r3, [pc, #176]	@ (8000c34 <Max30102_Task+0x13c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
			break;
 8000b86:	e04e      	b.n	8000c26 <Max30102_Task+0x12e>

		case MAX30102_STATE_CALCULATE_HR:
			if(IsFingerOnScreen)
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <Max30102_Task+0x148>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d026      	beq.n	8000be0 <Max30102_Task+0xe8>
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8000b92:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <Max30102_Task+0x154>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4a2d      	ldr	r2, [pc, #180]	@ (8000c50 <Max30102_Task+0x158>)
 8000b9a:	9203      	str	r2, [sp, #12]
 8000b9c:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <Max30102_Task+0x140>)
 8000b9e:	9202      	str	r2, [sp, #8]
 8000ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8000c54 <Max30102_Task+0x15c>)
 8000ba2:	9201      	str	r2, [sp, #4]
 8000ba4:	4a25      	ldr	r2, [pc, #148]	@ (8000c3c <Max30102_Task+0x144>)
 8000ba6:	9200      	str	r2, [sp, #0]
 8000ba8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bac:	492a      	ldr	r1, [pc, #168]	@ (8000c58 <Max30102_Task+0x160>)
 8000bae:	482b      	ldr	r0, [pc, #172]	@ (8000c5c <Max30102_Task+0x164>)
 8000bb0:	f000 f8ee 	bl	8000d90 <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8000bb4:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <Max30102_Task+0x154>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8000bbc:	4b28      	ldr	r3, [pc, #160]	@ (8000c60 <Max30102_Task+0x168>)
 8000bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc2:	099b      	lsrs	r3, r3, #6
 8000bc4:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000bc8:	fb01 f303 	mul.w	r3, r1, r3
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	4a1f      	ldr	r2, [pc, #124]	@ (8000c4c <Max30102_Task+0x154>)
 8000bd0:	6013      	str	r3, [r2, #0]
				CollectedSamples = 0;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <Max30102_Task+0x14c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <Max30102_Task+0x13c>)
 8000bda:	2203      	movs	r2, #3
 8000bdc:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8000bde:	e025      	b.n	8000c2c <Max30102_Task+0x134>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff ff49 	bl	8000a78 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff ff5a 	bl	8000aa0 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <Max30102_Task+0x13c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
			break;
 8000bf2:	e01b      	b.n	8000c2c <Max30102_Task+0x134>

		case MAX30102_STATE_COLLECT_NEXT_PORTION:
			if(IsFingerOnScreen)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <Max30102_Task+0x148>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <Max30102_Task+0x116>
			{
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <Max30102_Task+0x14c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b64      	cmp	r3, #100	@ 0x64
 8000c04:	d911      	bls.n	8000c2a <Max30102_Task+0x132>
				{
					StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <Max30102_Task+0x13c>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8000c0c:	e00d      	b.n	8000c2a <Max30102_Task+0x132>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff ff32 	bl	8000a78 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff ff43 	bl	8000aa0 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <Max30102_Task+0x13c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
			break;
 8000c20:	e003      	b.n	8000c2a <Max30102_Task+0x132>
			break;
 8000c22:	bf00      	nop
 8000c24:	e002      	b.n	8000c2c <Max30102_Task+0x134>
			break;
 8000c26:	bf00      	nop
 8000c28:	e000      	b.n	8000c2c <Max30102_Task+0x134>
			break;
 8000c2a:	bf00      	nop
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20001359 	.word	0x20001359
 8000c38:	20001354 	.word	0x20001354
 8000c3c:	2000134c 	.word	0x2000134c
 8000c40:	20001348 	.word	0x20001348
 8000c44:	20001344 	.word	0x20001344
 8000c48:	2000133c 	.word	0x2000133c
 8000c4c:	20001340 	.word	0x20001340
 8000c50:	20001358 	.word	0x20001358
 8000c54:	20001350 	.word	0x20001350
 8000c58:	200009dc 	.word	0x200009dc
 8000c5c:	2000007c 	.word	0x2000007c
 8000c60:	1b4e81b5 	.word	0x1b4e81b5

08000c64 <Max30102_Init>:

//
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8000c6c:	4a46      	ldr	r2, [pc, #280]	@ (8000d88 <Max30102_Init+0x124>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
	if(MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 8000c72:	f7ff fe1f 	bl	80008b4 <Max30102_Reset>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d001      	beq.n	8000c80 <Max30102_Init+0x1c>
		return MAX30102_ERROR;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e07e      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy))
 8000c80:	f107 030f 	add.w	r3, r7, #15
 8000c84:	4619      	mov	r1, r3
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fcd2 	bl	8000630 <Max30102_ReadReg>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d001      	beq.n	8000c96 <Max30102_Init+0x32>
		return MAX30102_ERROR;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e073      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fd49 	bl	800072e <Max30102_FifoWritePointer>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d001      	beq.n	8000ca6 <Max30102_Init+0x42>
		return MAX30102_ERROR;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e06b      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fd58 	bl	800075c <Max30102_FifoOverflowCounter>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d001      	beq.n	8000cb6 <Max30102_Init+0x52>
		return MAX30102_ERROR;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e063      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoReadPointer(0x00))
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fd67 	bl	800078a <Max30102_FifoReadPointer>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d001      	beq.n	8000cc6 <Max30102_Init+0x62>
		return MAX30102_ERROR;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e05b      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fd76 	bl	80007b8 <Max30102_FifoSampleAveraging>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d001      	beq.n	8000cd6 <Max30102_Init+0x72>
		return MAX30102_ERROR;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e053      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fd9c 	bl	8000814 <Max30102_FifoRolloverEnable>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d001      	beq.n	8000ce6 <Max30102_Init+0x82>
		return MAX30102_ERROR;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e04b      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 8000ce6:	2011      	movs	r0, #17
 8000ce8:	f7ff fda7 	bl	800083a <Max30102_FifoAlmostFullValue>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d001      	beq.n	8000cf6 <Max30102_Init+0x92>
		return MAX30102_ERROR;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e043      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f7ff fdfe 	bl	80008f8 <Max30102_SetMode>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d001      	beq.n	8000d06 <Max30102_Init+0xa2>
		return MAX30102_ERROR;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e03b      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fe25 	bl	8000956 <Max30102_SpO2AdcRange>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d001      	beq.n	8000d16 <Max30102_Init+0xb2>
		return MAX30102_ERROR;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e033      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff fe4e 	bl	80009b8 <Max30102_SpO2SampleRate>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d001      	beq.n	8000d26 <Max30102_Init+0xc2>
		return MAX30102_ERROR;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e02b      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 8000d26:	2003      	movs	r0, #3
 8000d28:	f7ff fe77 	bl	8000a1a <Max30102_SpO2LedPulseWidth>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d001      	beq.n	8000d36 <Max30102_Init+0xd2>
		return MAX30102_ERROR;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e023      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fe9e 	bl	8000a78 <Max30102_Led1PulseAmplitude>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d001      	beq.n	8000d46 <Max30102_Init+0xe2>
		return MAX30102_ERROR;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e01b      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff feaa 	bl	8000aa0 <Max30102_Led2PulseAmplitude>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d001      	beq.n	8000d56 <Max30102_Init+0xf2>
		return MAX30102_ERROR;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e013      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fcc9 	bl	80006ee <Max30102_SetIntAlmostFullEnabled>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d001      	beq.n	8000d66 <Max30102_Init+0x102>
		return MAX30102_ERROR;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e00b      	b.n	8000d7e <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff fcd1 	bl	800070e <Max30102_SetIntFifoDataReadyEnabled>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d001      	beq.n	8000d76 <Max30102_Init+0x112>
		return MAX30102_ERROR;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e003      	b.n	8000d7e <Max30102_Init+0x11a>
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
 8000d76:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <Max30102_Init+0x128>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000078 	.word	0x20000078
 8000d8c:	20001359 	.word	0x20001359

08000d90 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b0d3      	sub	sp, #332	@ 0x14c
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8000d9a:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8000d9e:	6020      	str	r0, [r4, #0]
 8000da0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8000da4:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8000da8:	6001      	str	r1, [r0, #0]
 8000daa:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8000dae:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8000db2:	600a      	str	r2, [r1, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dba:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8000dbe:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc;
    int32_t n_y_dc_max, n_x_dc_max;
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5],n_ratio_average;
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8000dc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dc4:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    // remove DC of ir signal
    un_ir_mean =0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000dda:	e021      	b.n	8000e20 <maxim_heart_rate_and_oxygen_saturation+0x90>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8000ddc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000de6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000df4:	4413      	add	r3, r2
 8000df6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8000dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4ad4      	ldr	r2, [pc, #848]	@ (8001154 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000e02:	fba2 1203 	umull	r1, r2, r2, r3
 8000e06:	0992      	lsrs	r2, r2, #6
 8000e08:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000e0c:	fb01 f202 	mul.w	r2, r1, r2
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000e20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e28:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	dbd4      	blt.n	8000ddc <maxim_heart_rate_and_oxygen_saturation+0x4c>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8000e32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e36:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e44:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    un_offset_tmp = un_offset;
 8000e48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e4c:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000e5c:	e025      	b.n	8000eaa <maxim_heart_rate_and_oxygen_saturation+0x11a>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8000e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000e68:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4ab7      	ldr	r2, [pc, #732]	@ (8001158 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8000e84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000e88:	3301      	adds	r3, #1
 8000e8a:	4ab2      	ldr	r2, [pc, #712]	@ (8001154 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000e8c:	fba2 1203 	umull	r1, r2, r2, r3
 8000e90:	0992      	lsrs	r2, r2, #6
 8000e92:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000e96:	fb01 f202 	mul.w	r2, r1, r2
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000eaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000eae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000eb2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbd0      	blt.n	8000e5e <maxim_heart_rate_and_oxygen_saturation+0xce>
	}

    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000ec2:	e02c      	b.n	8000f1e <maxim_heart_rate_and_oxygen_saturation+0x18e>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8000ec4:	4aa4      	ldr	r2, [pc, #656]	@ (8001158 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000eca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	49a0      	ldr	r1, [pc, #640]	@ (8001158 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eda:	441a      	add	r2, r3
 8000edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	499d      	ldr	r1, [pc, #628]	@ (8001158 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000ee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ee8:	441a      	add	r2, r3
 8000eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000eee:	3303      	adds	r3, #3
 8000ef0:	4999      	ldr	r1, [pc, #612]	@ (8001158 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000ef2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        an_x[k]=  n_denom/(int32_t)4;
 8000efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da00      	bge.n	8000f06 <maxim_heart_rate_and_oxygen_saturation+0x176>
 8000f04:	3303      	adds	r3, #3
 8000f06:	109b      	asrs	r3, r3, #2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4a93      	ldr	r2, [pc, #588]	@ (8001158 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8000f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f22:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 8000f26:	dbcd      	blt.n	8000ec4 <maxim_heart_rate_and_oxygen_saturation+0x134>
    }

    // get difference of smoothed IR signal

    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000f2e:	e015      	b.n	8000f5c <maxim_heart_rate_and_oxygen_saturation+0x1cc>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8000f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a88      	ldr	r2, [pc, #544]	@ (8001158 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f3c:	4986      	ldr	r1, [pc, #536]	@ (8001158 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f46:	1ad2      	subs	r2, r2, r3
 8000f48:	4984      	ldr	r1, [pc, #528]	@ (800115c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8000f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f56:	3301      	adds	r3, #1
 8000f58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f60:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 8000f64:	dde4      	ble.n	8000f30 <maxim_heart_rate_and_oxygen_saturation+0x1a0>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000f6c:	e019      	b.n	8000fa2 <maxim_heart_rate_and_oxygen_saturation+0x212>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8000f6e:	4a7b      	ldr	r2, [pc, #492]	@ (800115c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4977      	ldr	r1, [pc, #476]	@ (800115c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000f80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f84:	4413      	add	r3, r2
 8000f86:	0fda      	lsrs	r2, r3, #31
 8000f88:	4413      	add	r3, r2
 8000f8a:	105b      	asrs	r3, r3, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4a73      	ldr	r2, [pc, #460]	@ (800115c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8000f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fa6:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 8000faa:	dbe0      	blt.n	8000f6e <maxim_heart_rate_and_oxygen_saturation+0x1de>
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000fb2:	e039      	b.n	8001028 <maxim_heart_rate_and_oxygen_saturation+0x298>
        s= 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8000fba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000fbe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000fc2:	e018      	b.n	8000ff6 <maxim_heart_rate_and_oxygen_saturation+0x266>
            s -= an_dx[k] *auw_hamm[k-i] ;
 8000fc4:	4a65      	ldr	r2, [pc, #404]	@ (800115c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8000fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000fd2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fd6:	1a8a      	subs	r2, r1, r2
 8000fd8:	4961      	ldr	r1, [pc, #388]	@ (8001160 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8000fda:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8000fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000ff6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001000:	429a      	cmp	r2, r3
 8001002:	dddf      	ble.n	8000fc4 <maxim_heart_rate_and_oxygen_saturation+0x234>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm
 8001004:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001008:	4a56      	ldr	r2, [pc, #344]	@ (8001164 <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 800100a:	fb82 1203 	smull	r1, r2, r2, r3
 800100e:	1252      	asrs	r2, r2, #9
 8001010:	17db      	asrs	r3, r3, #31
 8001012:	1ad2      	subs	r2, r2, r3
 8001014:	4951      	ldr	r1, [pc, #324]	@ (800115c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001016:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 800101e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001022:	3301      	adds	r3, #1
 8001024:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001028:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800102c:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 8001030:	ddc0      	ble.n	8000fb4 <maxim_heart_rate_and_oxygen_saturation+0x224>
    }


    n_th1=0; // threshold calculation
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800103e:	e011      	b.n	8001064 <maxim_heart_rate_and_oxygen_saturation+0x2d4>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8001040:	4a46      	ldr	r2, [pc, #280]	@ (800115c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001042:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	2b00      	cmp	r3, #0
 800104c:	bfb8      	it	lt
 800104e:	425b      	neglt	r3, r3
 8001050:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001054:	4413      	add	r3, r2
 8001056:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 800105a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800105e:	3301      	adds	r3, #1
 8001060:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001064:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001068:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 800106c:	dde8      	ble.n	8001040 <maxim_heart_rate_and_oxygen_saturation+0x2b0>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 800106e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001072:	4a3d      	ldr	r2, [pc, #244]	@ (8001168 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 8001074:	fb82 1203 	smull	r1, r2, r2, r3
 8001078:	1192      	asrs	r2, r2, #6
 800107a:	17db      	asrs	r3, r3, #31
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks
 8001082:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8001086:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800108a:	2305      	movs	r3, #5
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2308      	movs	r3, #8
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f240 13ef 	movw	r3, #495	@ 0x1ef
 800109c:	4a2f      	ldr	r2, [pc, #188]	@ (800115c <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800109e:	f000 fb91 	bl	80017c4 <maxim_find_peaks>

    n_peak_interval_sum =0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    if (n_npks>=2){
 80010a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	dd44      	ble.n	800113a <maxim_heart_rate_and_oxygen_saturation+0x3aa>
        for (k=1; k<n_npks; k++)
 80010b0:	2301      	movs	r3, #1
 80010b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80010b6:	e01b      	b.n	80010f0 <maxim_heart_rate_and_oxygen_saturation+0x360>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 80010b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80010c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010cc:	1e59      	subs	r1, r3, #1
 80010ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80010e0:	4413      	add	r3, r2
 80010e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (k=1; k<n_npks; k++)
 80010e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010ea:	3301      	adds	r3, #1
 80010ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80010f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80010f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbdd      	blt.n	80010b8 <maxim_heart_rate_and_oxygen_saturation+0x328>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 80010fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001100:	3b01      	subs	r3, #1
 8001102:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001106:	fb92 f3f3 	sdiv	r3, r2, r3
 800110a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 800110e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800116c <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 800111e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001126:	ee17 2a90 	vmov	r2, s15
 800112a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800112e:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8001130:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e007      	b.n	800114a <maxim_heart_rate_and_oxygen_saturation+0x3ba>
    }
    else  {
        *pn_heart_rate = -999;
 800113a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800113e:	4a0c      	ldr	r2, [pc, #48]	@ (8001170 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8001140:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 8001142:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    }

    for ( k=0 ; k<n_npks ;k++)
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001150:	e026      	b.n	80011a0 <maxim_heart_rate_and_oxygen_saturation+0x410>
 8001152:	bf00      	nop
 8001154:	1b4e81b5 	.word	0x1b4e81b5
 8001158:	20001b1c 	.word	0x20001b1c
 800115c:	2000135c 	.word	0x2000135c
 8001160:	080053e0 	.word	0x080053e0
 8001164:	725f9bed 	.word	0x725f9bed
 8001168:	21195767 	.word	0x21195767
 800116c:	45bb8000 	.word	0x45bb8000
 8001170:	fffffc19 	.word	0xfffffc19
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 8001174:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001178:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800117c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	1c9a      	adds	r2, r3, #2
 8001186:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001190:	443b      	add	r3, r7
 8001192:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 8001196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800119a:	3301      	adds	r3, #1
 800119c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80011a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80011a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbe3      	blt.n	8001174 <maxim_heart_rate_and_oxygen_saturation+0x3e4>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 80011ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011b0:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80011c0:	e032      	b.n	8001228 <maxim_heart_rate_and_oxygen_saturation+0x498>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 80011c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80011cc:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4ab3      	ldr	r2, [pc, #716]	@ (80014a8 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80011da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 80011e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80011ec:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4aac      	ldr	r2, [pc, #688]	@ (80014ac <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80011fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001206:	3301      	adds	r3, #1
 8001208:	4aa9      	ldr	r2, [pc, #676]	@ (80014b0 <maxim_heart_rate_and_oxygen_saturation+0x720>)
 800120a:	fba2 1203 	umull	r1, r2, r2, r3
 800120e:	0992      	lsrs	r2, r2, #6
 8001210:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001214:	fb01 f202 	mul.w	r2, r1, r2
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 800121e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001222:	3301      	adds	r3, #1
 8001224:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001228:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800122c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001230:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	dbc3      	blt.n	80011c2 <maxim_heart_rate_and_oxygen_saturation+0x432>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001246:	e05a      	b.n	80012fe <maxim_heart_rate_and_oxygen_saturation+0x56e>
        un_only_once =1;
 8001248:	2301      	movs	r3, #1
 800124a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        m=an_ir_valley_locs[k];
 800124e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001258:	443b      	add	r3, r7
 800125a:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        n_c_min= 16777216;//2^24;
 8001262:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001266:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 800126a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800126e:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 8001272:	da3f      	bge.n	80012f4 <maxim_heart_rate_and_oxygen_saturation+0x564>
 8001274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001278:	2b05      	cmp	r3, #5
 800127a:	dd3b      	ble.n	80012f4 <maxim_heart_rate_and_oxygen_saturation+0x564>
            for(i= m-5;i<m+5; i++)
 800127c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001280:	3b05      	subs	r3, #5
 8001282:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001286:	e025      	b.n	80012d4 <maxim_heart_rate_and_oxygen_saturation+0x544>
                if (an_x[i]<n_c_min){
 8001288:	4a87      	ldr	r2, [pc, #540]	@ (80014a8 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800128a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001296:	429a      	cmp	r2, r3
 8001298:	dd17      	ble.n	80012ca <maxim_heart_rate_and_oxygen_saturation+0x53a>
                    if (un_only_once >0){
 800129a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <maxim_heart_rate_and_oxygen_saturation+0x518>
                       un_only_once =0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
                   }
                   n_c_min= an_x[i] ;
 80012a8:	4a7f      	ldr	r2, [pc, #508]	@ (80014a8 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80012aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                   an_exact_ir_valley_locs[k]=i;
 80012b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80012c0:	443b      	add	r3, r7
 80012c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012c6:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 80012ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012ce:	3301      	adds	r3, #1
 80012d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80012d8:	3304      	adds	r3, #4
 80012da:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012de:	429a      	cmp	r2, r3
 80012e0:	ddd2      	ble.n	8001288 <maxim_heart_rate_and_oxygen_saturation+0x4f8>
                }
            if (un_only_once ==0)
 80012e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d104      	bne.n	80012f4 <maxim_heart_rate_and_oxygen_saturation+0x564>
                n_exact_ir_valley_locs_count ++ ;
 80012ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for(k=0 ; k<n_npks ;k++){
 80012f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012f8:	3301      	adds	r3, #1
 80012fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80012fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001302:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001306:	429a      	cmp	r2, r3
 8001308:	db9e      	blt.n	8001248 <maxim_heart_rate_and_oxygen_saturation+0x4b8>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 800130a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800130e:	2b01      	cmp	r3, #1
 8001310:	dc08      	bgt.n	8001324 <maxim_heart_rate_and_oxygen_saturation+0x594>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8001312:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001316:	4a67      	ldr	r2, [pc, #412]	@ (80014b4 <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8001318:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0;
 800131a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
       return;
 8001322:	e243      	b.n	80017ac <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800132a:	e04c      	b.n	80013c6 <maxim_heart_rate_and_oxygen_saturation+0x636>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 800132c:	4a5e      	ldr	r2, [pc, #376]	@ (80014a8 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800132e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001336:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800133a:	3301      	adds	r3, #1
 800133c:	495a      	ldr	r1, [pc, #360]	@ (80014a8 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800133e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001342:	441a      	add	r2, r3
 8001344:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001348:	3302      	adds	r3, #2
 800134a:	4957      	ldr	r1, [pc, #348]	@ (80014a8 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800134c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001350:	441a      	add	r2, r3
 8001352:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001356:	3303      	adds	r3, #3
 8001358:	4953      	ldr	r1, [pc, #332]	@ (80014a8 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800135a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800135e:	4413      	add	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	da00      	bge.n	8001366 <maxim_heart_rate_and_oxygen_saturation+0x5d6>
 8001364:	3303      	adds	r3, #3
 8001366:	109b      	asrs	r3, r3, #2
 8001368:	4619      	mov	r1, r3
 800136a:	4a4f      	ldr	r2, [pc, #316]	@ (80014a8 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800136c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001370:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 8001374:	4a4d      	ldr	r2, [pc, #308]	@ (80014ac <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001376:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800137a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800137e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001382:	3301      	adds	r3, #1
 8001384:	4949      	ldr	r1, [pc, #292]	@ (80014ac <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800138a:	441a      	add	r2, r3
 800138c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001390:	3302      	adds	r3, #2
 8001392:	4946      	ldr	r1, [pc, #280]	@ (80014ac <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001394:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001398:	441a      	add	r2, r3
 800139a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800139e:	3303      	adds	r3, #3
 80013a0:	4942      	ldr	r1, [pc, #264]	@ (80014ac <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80013a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013a6:	4413      	add	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	da00      	bge.n	80013ae <maxim_heart_rate_and_oxygen_saturation+0x61e>
 80013ac:	3303      	adds	r3, #3
 80013ae:	109b      	asrs	r3, r3, #2
 80013b0:	4619      	mov	r1, r3
 80013b2:	4a3e      	ldr	r2, [pc, #248]	@ (80014ac <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80013b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80013bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013c0:	3301      	adds	r3, #1
 80013c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80013c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013ca:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 80013ce:	dbad      	blt.n	800132c <maxim_heart_rate_and_oxygen_saturation+0x59c>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    n_i_ratio_count =0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    for(k=0; k< 5; k++) an_ratio[k]=0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80013e2:	e00d      	b.n	8001400 <maxim_heart_rate_and_oxygen_saturation+0x670>
 80013e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80013f0:	2100      	movs	r1, #0
 80013f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80013f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013fa:	3301      	adds	r3, #1
 80013fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001400:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001404:	2b04      	cmp	r3, #4
 8001406:	dded      	ble.n	80013e4 <maxim_heart_rate_and_oxygen_saturation+0x654>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800140e:	e018      	b.n	8001442 <maxim_heart_rate_and_oxygen_saturation+0x6b2>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){
 8001410:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800141a:	443b      	add	r3, r7
 800141c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001420:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001424:	dd08      	ble.n	8001438 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8001426:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800142a:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <maxim_heart_rate_and_oxygen_saturation+0x724>)
 800142c:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0;
 800142e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
            return;
 8001436:	e1b9      	b.n	80017ac <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001438:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800143c:	3301      	adds	r3, #1
 800143e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001442:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800144a:	429a      	cmp	r2, r3
 800144c:	dbe0      	blt.n	8001410 <maxim_heart_rate_and_oxygen_saturation+0x680>
        }
    }
    // find max between two valley locations
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001454:	e14d      	b.n	80016f2 <maxim_heart_rate_and_oxygen_saturation+0x962>
        n_y_dc_max= -16777216 ;
 8001456:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800145a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        n_x_dc_max= - 16777216;
 800145e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001462:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 8001466:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800146a:	3301      	adds	r3, #1
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001472:	443b      	add	r3, r7
 8001474:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001478:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001482:	443b      	add	r3, r7
 8001484:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b0a      	cmp	r3, #10
 800148c:	f340 812c 	ble.w	80016e8 <maxim_heart_rate_and_oxygen_saturation+0x958>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001490:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800149a:	443b      	add	r3, r7
 800149c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80014a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80014a4:	e035      	b.n	8001512 <maxim_heart_rate_and_oxygen_saturation+0x782>
 80014a6:	bf00      	nop
 80014a8:	20001b1c 	.word	0x20001b1c
 80014ac:	200022ec 	.word	0x200022ec
 80014b0:	1b4e81b5 	.word	0x1b4e81b5
 80014b4:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80014b8:	4abe      	ldr	r2, [pc, #760]	@ (80017b4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80014ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80014c6:	429a      	cmp	r2, r3
 80014c8:	da0a      	bge.n	80014e0 <maxim_heart_rate_and_oxygen_saturation+0x750>
 80014ca:	4aba      	ldr	r2, [pc, #744]	@ (80017b4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80014cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80014d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 80014e0:	4ab5      	ldr	r2, [pc, #724]	@ (80017b8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80014e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80014ee:	429a      	cmp	r2, r3
 80014f0:	da0a      	bge.n	8001508 <maxim_heart_rate_and_oxygen_saturation+0x778>
 80014f2:	4ab1      	ldr	r2, [pc, #708]	@ (80017b8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80014f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001500:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001504:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001508:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800150c:	3301      	adds	r3, #1
 800150e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001512:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001516:	3301      	adds	r3, #1
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800151e:	443b      	add	r3, r7
 8001520:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001524:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001528:	429a      	cmp	r2, r3
 800152a:	dbc5      	blt.n	80014b8 <maxim_heart_rate_and_oxygen_saturation+0x728>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 800152c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001530:	3301      	adds	r3, #1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001538:	443b      	add	r3, r7
 800153a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800153e:	4a9e      	ldr	r2, [pc, #632]	@ (80017b8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001544:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800154e:	443b      	add	r3, r7
 8001550:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001554:	4998      	ldr	r1, [pc, #608]	@ (80017b8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001556:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800155a:	1ad2      	subs	r2, r2, r3
 800155c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001566:	443b      	add	r3, r7
 8001568:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800156c:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8001570:	1acb      	subs	r3, r1, r3
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ;
 800157a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001584:	443b      	add	r3, r7
 8001586:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800158a:	4a8b      	ldr	r2, [pc, #556]	@ (80017b8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 800158c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001590:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001594:	3301      	adds	r3, #1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800159c:	443b      	add	r3, r7
 800159e:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80015a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80015ac:	443b      	add	r3, r7
 80015ae:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80015b2:	1acb      	subs	r3, r1, r3
 80015b4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80015b8:	fb91 f3f3 	sdiv	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec


            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 80015c2:	4a7d      	ldr	r2, [pc, #500]	@ (80017b8 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80015c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 80015d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015da:	3301      	adds	r3, #1
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80015e2:	443b      	add	r3, r7
 80015e4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80015e8:	4a72      	ldr	r2, [pc, #456]	@ (80017b4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80015ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80015f8:	443b      	add	r3, r7
 80015fa:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80015fe:	496d      	ldr	r1, [pc, #436]	@ (80017b4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001600:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001610:	443b      	add	r3, r7
 8001612:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001616:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800161a:	1acb      	subs	r3, r1, r3
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 8001624:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800162e:	443b      	add	r3, r7
 8001630:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001634:	4a5f      	ldr	r2, [pc, #380]	@ (80017b4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001636:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800163a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800163e:	3301      	adds	r3, #1
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001646:	443b      	add	r3, r7
 8001648:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 800164c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001656:	443b      	add	r3, r7
 8001658:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800165c:	1acb      	subs	r3, r1, r3
 800165e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8001662:	fb91 f3f3 	sdiv	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 800166c:	4a51      	ldr	r2, [pc, #324]	@ (80017b4 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 800166e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001676:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8001680:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001684:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	11db      	asrs	r3, r3, #7
 800168e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8001692:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001696:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	11db      	asrs	r3, r3, #7
 80016a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80016a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	dd1d      	ble.n	80016e8 <maxim_heart_rate_and_oxygen_saturation+0x958>
 80016ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	dc19      	bgt.n	80016e8 <maxim_heart_rate_and_oxygen_saturation+0x958>
 80016b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d015      	beq.n	80016e8 <maxim_heart_rate_and_oxygen_saturation+0x958>
            {
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80016bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016c0:	2264      	movs	r2, #100	@ 0x64
 80016c2:	fb03 f202 	mul.w	r2, r3, r2
 80016c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016ca:	fb92 f1f3 	sdiv	r1, r2, r3
 80016ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80016da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 80016de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016e2:	3301      	adds	r3, #1
 80016e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80016e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016ec:	3301      	adds	r3, #1
 80016ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80016f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f6ff aeaa 	blt.w	8001456 <maxim_heart_rate_and_oxygen_saturation+0x6c6>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f94f 	bl	80019ae <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8001710:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001714:	0fda      	lsrs	r2, r3, #31
 8001716:	4413      	add	r3, r2
 8001718:	105b      	asrs	r3, r3, #1
 800171a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    if (n_middle_idx >1)
 800171e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001722:	2b01      	cmp	r3, #1
 8001724:	dd17      	ble.n	8001756 <maxim_heart_rate_and_oxygen_saturation+0x9c6>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8001726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800172a:	1e5a      	subs	r2, r3, #1
 800172c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001730:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001734:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001738:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800173c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001740:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 8001744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001748:	4413      	add	r3, r2
 800174a:	0fda      	lsrs	r2, r3, #31
 800174c:	4413      	add	r3, r2
 800174e:	105b      	asrs	r3, r3, #1
 8001750:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001754:	e009      	b.n	800176a <maxim_heart_rate_and_oxygen_saturation+0x9da>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8001756:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800175a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800175e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 800176a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800176e:	2b02      	cmp	r3, #2
 8001770:	dd14      	ble.n	800179c <maxim_heart_rate_and_oxygen_saturation+0xa0c>
 8001772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001776:	2bb7      	cmp	r3, #183	@ 0xb7
 8001778:	dc10      	bgt.n	800179c <maxim_heart_rate_and_oxygen_saturation+0xa0c>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 800177a:	4a10      	ldr	r2, [pc, #64]	@ (80017bc <maxim_heart_rate_and_oxygen_saturation+0xa2c>)
 800177c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001780:	4413      	add	r3, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        *pn_spo2 = n_spo2_calc ;
 8001788:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800178c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8001790:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8001792:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e007      	b.n	80017ac <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 800179c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <maxim_heart_rate_and_oxygen_saturation+0xa30>)
 80017a2:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0;
 80017a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
    }
}
 80017ac:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	20001b1c 	.word	0x20001b1c
 80017b8:	200022ec 	.word	0x200022ec
 80017bc:	08005420 	.word	0x08005420
 80017c0:	fffffc19 	.word	0xfffffc19

080017c4 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f812 	bl	8001806 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f880 	bl	80018ee <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	bfa8      	it	ge
 80017f8:	461a      	movge	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	601a      	str	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001806:	b480      	push	{r7}
 8001808:	b087      	sub	sp, #28
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8001814:	2301      	movs	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

    while (i < n_size-1){
 800181e:	e05a      	b.n	80018d6 <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	429a      	cmp	r2, r3
 800182e:	da4f      	bge.n	80018d0 <maxim_peaks_above_min_height+0xca>
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001840:	3b01      	subs	r3, #1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	440b      	add	r3, r1
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	dd40      	ble.n	80018d0 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001852:	e002      	b.n	800185a <maxim_peaks_above_min_height+0x54>
                n_width++;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3301      	adds	r3, #1
 8001858:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4413      	add	r3, r2
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	dd0d      	ble.n	8001882 <maxim_peaks_above_min_height+0x7c>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	440b      	add	r3, r1
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	440b      	add	r3, r1
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d0e8      	beq.n	8001854 <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	440b      	add	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	440b      	add	r3, r1
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	dd13      	ble.n	80018c6 <maxim_peaks_above_min_height+0xc0>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b0e      	cmp	r3, #14
 80018a4:	dc0f      	bgt.n	80018c6 <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1c59      	adds	r1, r3, #1
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	6011      	str	r1, [r2, #0]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	3301      	adds	r3, #1
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80018c4:	e007      	b.n	80018d6 <maxim_peaks_above_min_height+0xd0>
            }
            else
                i += n_width;
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4413      	add	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80018ce:	e002      	b.n	80018d6 <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	3b01      	subs	r3, #1
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	db9f      	blt.n	8001820 <maxim_peaks_above_min_height+0x1a>
    }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b088      	sub	sp, #32
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	603b      	str	r3, [r7, #0]

    int32_t i, j, n_old_npks, n_dist;

    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	68f9      	ldr	r1, [r7, #12]
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f895 	bl	8001a34 <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	e03e      	b.n	8001990 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	e02c      	b.n	8001982 <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <maxim_remove_close_peaks+0x58>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	68f9      	ldr	r1, [r7, #12]
 8001940:	440b      	add	r3, r1
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e001      	b.n	800194a <maxim_remove_close_peaks+0x5c>
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	dc04      	bgt.n	8001960 <maxim_remove_close_peaks+0x72>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	425b      	negs	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	da0d      	bge.n	800197c <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	441a      	add	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	1c58      	adds	r0, r3, #1
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	6008      	str	r0, [r1, #0]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	440b      	add	r3, r1
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	3301      	adds	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	429a      	cmp	r2, r3
 8001988:	dbce      	blt.n	8001928 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	429a      	cmp	r2, r3
 8001998:	dbbb      	blt.n	8001912 <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 f804 	bl	80019ae <maxim_sort_ascend>
}
 80019a6:	bf00      	nop
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80019ae:	b480      	push	{r7}
 80019b0:	b087      	sub	sp, #28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80019b8:	2301      	movs	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e02f      	b.n	8001a1e <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e00f      	b.n	80019f0 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019d6:	3b01      	subs	r3, #1
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	441a      	add	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	440b      	add	r3, r1
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	dd0a      	ble.n	8001a0c <maxim_sort_ascend+0x5e>
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019fc:	3b01      	subs	r3, #1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbe1      	blt.n	80019d0 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbcb      	blt.n	80019be <maxim_sort_ascend+0x10>
    }
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8001a40:	2301      	movs	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	e037      	b.n	8001ab6 <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	e00f      	b.n	8001a78 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	441a      	add	r2, r3
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	dd12      	ble.n	8001aa4 <maxim_sort_indices_descend+0x70>
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	440b      	add	r3, r1
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	440b      	add	r3, r1
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dcd9      	bgt.n	8001a58 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	4413      	add	r3, r2
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	dbc3      	blt.n	8001a46 <maxim_sort_indices_descend+0x12>
    }
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3724      	adds	r7, #36	@ 0x24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a25      	ldr	r2, [pc, #148]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a1e      	ldr	r2, [pc, #120]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <MX_GPIO_Init+0xb4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2180      	movs	r1, #128	@ 0x80
 8001b3a:	4812      	ldr	r0, [pc, #72]	@ (8001b84 <MX_GPIO_Init+0xb8>)
 8001b3c:	f000 fde2 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <MX_GPIO_Init+0xb8>)
 8001b58:	f000 fc40 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001b5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <MX_GPIO_Init+0xbc>)
 8001b74:	f000 fc32 	bl	80023dc <HAL_GPIO_Init>

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020000 	.word	0x40020000

08001b8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001b92:	4a13      	ldr	r2, [pc, #76]	@ (8001be0 <MX_I2C1_Init+0x54>)
 8001b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001b98:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <MX_I2C1_Init+0x58>)
 8001b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001baa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MX_I2C1_Init+0x50>)
 8001bca:	f000 fdb5 	bl	8002738 <HAL_I2C_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bd4:	f000 f916 	bl	8001e04 <Error_Handler>
  }

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20002abc 	.word	0x20002abc
 8001be0:	40005400 	.word	0x40005400
 8001be4:	00061a80 	.word	0x00061a80

08001be8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	@ (8001c6c <HAL_I2C_MspInit+0x84>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12c      	bne.n	8001c64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2c:	2312      	movs	r3, #18
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	480c      	ldr	r0, [pc, #48]	@ (8001c74 <HAL_I2C_MspInit+0x8c>)
 8001c44:	f000 fbca 	bl	80023dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_I2C_MspInit+0x88>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	@ 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020400 	.word	0x40020400

08001c78 <UART2_SendString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART2_SendString(char* s) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7fe fac5 	bl	8000210 <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <UART2_SendString+0x28>)
 8001c92:	f002 fb27 	bl	80042e4 <HAL_UART_Transmit>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20002b34 	.word	0x20002b34

08001ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca4:	b598      	push	{r3, r4, r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca8:	f000 fa14 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cac:	f000 f834 	bl	8001d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb0:	f7ff ff0c 	bl	8001acc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cb4:	f7ff ff6a 	bl	8001b8c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001cb8:	f000 f970 	bl	8001f9c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001cbc:	f000 f896 	bl	8001dec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	UART2_SendString("START\n\r");
 8001cc0:	4810      	ldr	r0, [pc, #64]	@ (8001d04 <main+0x60>)
 8001cc2:	f7ff ffd9 	bl	8001c78 <UART2_SendString>

	Max30102_Init(&hi2c1);
 8001cc6:	4810      	ldr	r0, [pc, #64]	@ (8001d08 <main+0x64>)
 8001cc8:	f7fe ffcc 	bl	8000c64 <Max30102_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		Max30102_Task();
 8001ccc:	f7fe ff14 	bl	8000af8 <Max30102_Task>
		sprintf(UartBuffer, "%c[2J%c[H", 27, 27);
 8001cd0:	231b      	movs	r3, #27
 8001cd2:	221b      	movs	r2, #27
 8001cd4:	490d      	ldr	r1, [pc, #52]	@ (8001d0c <main+0x68>)
 8001cd6:	480e      	ldr	r0, [pc, #56]	@ (8001d10 <main+0x6c>)
 8001cd8:	f002 fec0 	bl	8004a5c <siprintf>
		UART2_SendString(UartBuffer);
 8001cdc:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <main+0x6c>)
 8001cde:	f7ff ffcb 	bl	8001c78 <UART2_SendString>

		sprintf(UartBuffer, "HR: %ld\n\rSpO2: %ld\n\r", Max30102_GetHeartRate(), Max30102_GetSpO2Value());
 8001ce2:	f7fe fef1 	bl	8000ac8 <Max30102_GetHeartRate>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	f7fe fefa 	bl	8000ae0 <Max30102_GetSpO2Value>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4622      	mov	r2, r4
 8001cf0:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <main+0x70>)
 8001cf2:	4807      	ldr	r0, [pc, #28]	@ (8001d10 <main+0x6c>)
 8001cf4:	f002 feb2 	bl	8004a5c <siprintf>
		UART2_SendString(UartBuffer);
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <main+0x6c>)
 8001cfa:	f7ff ffbd 	bl	8001c78 <UART2_SendString>
		Max30102_Task();
 8001cfe:	bf00      	nop
 8001d00:	e7e4      	b.n	8001ccc <main+0x28>
 8001d02:	bf00      	nop
 8001d04:	080053b4 	.word	0x080053b4
 8001d08:	20002abc 	.word	0x20002abc
 8001d0c:	080053bc 	.word	0x080053bc
 8001d10:	20002b10 	.word	0x20002b10
 8001d14:	080053c8 	.word	0x080053c8

08001d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b094      	sub	sp, #80	@ 0x50
 8001d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	2234      	movs	r2, #52	@ 0x34
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 feba 	bl	8004aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b28      	ldr	r3, [pc, #160]	@ (8001de4 <SystemClock_Config+0xcc>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	4a27      	ldr	r2, [pc, #156]	@ (8001de4 <SystemClock_Config+0xcc>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4c:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <SystemClock_Config+0xcc>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d58:	2300      	movs	r3, #0
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <SystemClock_Config+0xd0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d64:	4a20      	ldr	r2, [pc, #128]	@ (8001de8 <SystemClock_Config+0xd0>)
 8001d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <SystemClock_Config+0xd0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d80:	2310      	movs	r3, #16
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d84:	2302      	movs	r3, #2
 8001d86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001d90:	2354      	movs	r3, #84	@ 0x54
 8001d92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 ffb1 	bl	8003d08 <HAL_RCC_OscConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dac:	f000 f82a 	bl	8001e04 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db0:	230f      	movs	r3, #15
 8001db2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db4:	2302      	movs	r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	2102      	movs	r1, #2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fcd7 	bl	8003780 <HAL_RCC_ClockConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001dd8:	f000 f814 	bl	8001e04 <Error_Handler>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3750      	adds	r7, #80	@ 0x50
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40007000 	.word	0x40007000

08001dec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2101      	movs	r1, #1
 8001df4:	2017      	movs	r0, #23
 8001df6:	f000 faba 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001dfa:	2017      	movs	r0, #23
 8001dfc:	f000 fad3 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_MspInit+0x4c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	4a0f      	ldr	r2, [pc, #60]	@ (8001e60 <HAL_MspInit+0x4c>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <HAL_MspInit+0x4c>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <HAL_MspInit+0x4c>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	4a08      	ldr	r2, [pc, #32]	@ (8001e60 <HAL_MspInit+0x4c>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_MspInit+0x4c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <NMI_Handler+0x4>

08001e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eba:	f000 f95d 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f002 fddc 	bl	8004ab0 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20020000 	.word	0x20020000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	20002b30 	.word	0x20002b30
 8001f2c:	20002cc8 	.word	0x20002cc8

08001f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <SystemInit+0x60>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3a:	4a15      	ldr	r2, [pc, #84]	@ (8001f90 <SystemInit+0x60>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f44:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <SystemInit+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <SystemInit+0x64>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f50:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <SystemInit+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <SystemInit+0x64>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f94 <SystemInit+0x64>)
 8001f5c:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <SystemInit+0x64>)
 8001f68:	4a0b      	ldr	r2, [pc, #44]	@ (8001f98 <SystemInit+0x68>)
 8001f6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <SystemInit+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a08      	ldr	r2, [pc, #32]	@ (8001f94 <SystemInit+0x64>)
 8001f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <SystemInit+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f7e:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <SystemInit+0x60>)
 8001f80:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f84:	609a      	str	r2, [r3, #8]
#endif
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00
 8001f94:	40023800 	.word	0x40023800
 8001f98:	24003010 	.word	0x24003010

08001f9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <MX_USART2_UART_Init+0x50>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	f002 f936 	bl	8004244 <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fde:	f7ff ff11 	bl	8001e04 <Error_Handler>
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20002b34 	.word	0x20002b34
 8001fec:	40004400 	.word	0x40004400

08001ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_UART_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_UART_MspInit+0x88>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_UART_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800204a:	230c      	movs	r3, #12
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002052:	2301      	movs	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205a:	2307      	movs	r3, #7
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <HAL_UART_MspInit+0x8c>)
 8002066:	f000 f9b9 	bl	80023dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	@ 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40004400 	.word	0x40004400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002084:	f7ff ff54 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800208a:	490d      	ldr	r1, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020a0:	4c0a      	ldr	r4, [pc, #40]	@ (80020cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f002 fd05 	bl	8004abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fdf7 	bl	8001ca4 <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020c4:	08005534 	.word	0x08005534
  ldr r2, =_sbss
 80020c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020cc:	20002cc8 	.word	0x20002cc8

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	@ (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f92b 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	200f      	movs	r0, #15
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fe84 	bl	8001e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f943 	bl	80023c2 <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f90b 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000000 	.word	0x20000000
 8002170:	20000008 	.word	0x20000008
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	20002b7c 	.word	0x20002b7c

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20002b7c 	.word	0x20002b7c

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	@ (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff3e 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff31 	bl	800221c <__NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffa2 	bl	8002314 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	e165      	b.n	80026c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f8:	2201      	movs	r2, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	f040 8154 	bne.w	80026be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d005      	beq.n	800242e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242a:	2b02      	cmp	r3, #2
 800242c:	d130      	bne.n	8002490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 0201 	and.w	r2, r3, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b03      	cmp	r3, #3
 800249a:	d017      	beq.n	80024cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d123      	bne.n	8002520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	08da      	lsrs	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3208      	adds	r2, #8
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0203 	and.w	r2, r3, #3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80ae 	beq.w	80026be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b5d      	ldr	r3, [pc, #372]	@ (80026dc <HAL_GPIO_Init+0x300>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4a5c      	ldr	r2, [pc, #368]	@ (80026dc <HAL_GPIO_Init+0x300>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	4b5a      	ldr	r3, [pc, #360]	@ (80026dc <HAL_GPIO_Init+0x300>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257e:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4f      	ldr	r2, [pc, #316]	@ (80026e4 <HAL_GPIO_Init+0x308>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d025      	beq.n	80025f6 <HAL_GPIO_Init+0x21a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4e      	ldr	r2, [pc, #312]	@ (80026e8 <HAL_GPIO_Init+0x30c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01f      	beq.n	80025f2 <HAL_GPIO_Init+0x216>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4d      	ldr	r2, [pc, #308]	@ (80026ec <HAL_GPIO_Init+0x310>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d019      	beq.n	80025ee <HAL_GPIO_Init+0x212>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4c      	ldr	r2, [pc, #304]	@ (80026f0 <HAL_GPIO_Init+0x314>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <HAL_GPIO_Init+0x20e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	@ (80026f4 <HAL_GPIO_Init+0x318>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00d      	beq.n	80025e6 <HAL_GPIO_Init+0x20a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4a      	ldr	r2, [pc, #296]	@ (80026f8 <HAL_GPIO_Init+0x31c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d007      	beq.n	80025e2 <HAL_GPIO_Init+0x206>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a49      	ldr	r2, [pc, #292]	@ (80026fc <HAL_GPIO_Init+0x320>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_GPIO_Init+0x202>
 80025da:	2306      	movs	r3, #6
 80025dc:	e00c      	b.n	80025f8 <HAL_GPIO_Init+0x21c>
 80025de:	2307      	movs	r3, #7
 80025e0:	e00a      	b.n	80025f8 <HAL_GPIO_Init+0x21c>
 80025e2:	2305      	movs	r3, #5
 80025e4:	e008      	b.n	80025f8 <HAL_GPIO_Init+0x21c>
 80025e6:	2304      	movs	r3, #4
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x21c>
 80025ea:	2303      	movs	r3, #3
 80025ec:	e004      	b.n	80025f8 <HAL_GPIO_Init+0x21c>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e002      	b.n	80025f8 <HAL_GPIO_Init+0x21c>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_GPIO_Init+0x21c>
 80025f6:	2300      	movs	r3, #0
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	f002 0203 	and.w	r2, r2, #3
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	4093      	lsls	r3, r2
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002608:	4935      	ldr	r1, [pc, #212]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002616:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <HAL_GPIO_Init+0x324>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263a:	4a31      	ldr	r2, [pc, #196]	@ (8002700 <HAL_GPIO_Init+0x324>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002640:	4b2f      	ldr	r3, [pc, #188]	@ (8002700 <HAL_GPIO_Init+0x324>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002664:	4a26      	ldr	r2, [pc, #152]	@ (8002700 <HAL_GPIO_Init+0x324>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266a:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <HAL_GPIO_Init+0x324>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800268e:	4a1c      	ldr	r2, [pc, #112]	@ (8002700 <HAL_GPIO_Init+0x324>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002694:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <HAL_GPIO_Init+0x324>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b8:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_GPIO_Init+0x324>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	f67f ae96 	bls.w	80023f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3724      	adds	r7, #36	@ 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40013800 	.word	0x40013800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	40020400 	.word	0x40020400
 80026ec:	40020800 	.word	0x40020800
 80026f0:	40020c00 	.word	0x40020c00
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40021400 	.word	0x40021400
 80026fc:	40021800 	.word	0x40021800
 8002700:	40013c00 	.word	0x40013c00

08002704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002714:	787b      	ldrb	r3, [r7, #1]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002720:	e003      	b.n	800272a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	041a      	lsls	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	619a      	str	r2, [r3, #24]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e12b      	b.n	80029a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fa42 	bl	8001be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	@ 0x24
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800278a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800279a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800279c:	f001 f8e2 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 80027a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4a81      	ldr	r2, [pc, #516]	@ (80029ac <HAL_I2C_Init+0x274>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d807      	bhi.n	80027bc <HAL_I2C_Init+0x84>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4a80      	ldr	r2, [pc, #512]	@ (80029b0 <HAL_I2C_Init+0x278>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	bf94      	ite	ls
 80027b4:	2301      	movls	r3, #1
 80027b6:	2300      	movhi	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e006      	b.n	80027ca <HAL_I2C_Init+0x92>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a7d      	ldr	r2, [pc, #500]	@ (80029b4 <HAL_I2C_Init+0x27c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0e7      	b.n	80029a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a78      	ldr	r2, [pc, #480]	@ (80029b8 <HAL_I2C_Init+0x280>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0c9b      	lsrs	r3, r3, #18
 80027dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a6a      	ldr	r2, [pc, #424]	@ (80029ac <HAL_I2C_Init+0x274>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d802      	bhi.n	800280c <HAL_I2C_Init+0xd4>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3301      	adds	r3, #1
 800280a:	e009      	b.n	8002820 <HAL_I2C_Init+0xe8>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	4a69      	ldr	r2, [pc, #420]	@ (80029bc <HAL_I2C_Init+0x284>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	3301      	adds	r3, #1
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	430b      	orrs	r3, r1
 8002826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002832:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	495c      	ldr	r1, [pc, #368]	@ (80029ac <HAL_I2C_Init+0x274>)
 800283c:	428b      	cmp	r3, r1
 800283e:	d819      	bhi.n	8002874 <HAL_I2C_Init+0x13c>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e59      	subs	r1, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fbb1 f3f3 	udiv	r3, r1, r3
 800284e:	1c59      	adds	r1, r3, #1
 8002850:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002854:	400b      	ands	r3, r1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_I2C_Init+0x138>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1e59      	subs	r1, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fbb1 f3f3 	udiv	r3, r1, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286e:	e051      	b.n	8002914 <HAL_I2C_Init+0x1dc>
 8002870:	2304      	movs	r3, #4
 8002872:	e04f      	b.n	8002914 <HAL_I2C_Init+0x1dc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <HAL_I2C_Init+0x168>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e58      	subs	r0, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	440b      	add	r3, r1
 800288a:	fbb0 f3f3 	udiv	r3, r0, r3
 800288e:	3301      	adds	r3, #1
 8002890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e012      	b.n	80028c6 <HAL_I2C_Init+0x18e>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	0099      	lsls	r1, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Init+0x196>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e022      	b.n	8002914 <HAL_I2C_Init+0x1dc>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10e      	bne.n	80028f4 <HAL_I2C_Init+0x1bc>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e58      	subs	r0, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	440b      	add	r3, r1
 80028e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028f2:	e00f      	b.n	8002914 <HAL_I2C_Init+0x1dc>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1e58      	subs	r0, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	0099      	lsls	r1, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	6809      	ldr	r1, [r1, #0]
 8002918:	4313      	orrs	r3, r2
 800291a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002942:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6911      	ldr	r1, [r2, #16]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	4311      	orrs	r1, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	430b      	orrs	r3, r1
 8002956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	000186a0 	.word	0x000186a0
 80029b0:	001e847f 	.word	0x001e847f
 80029b4:	003d08ff 	.word	0x003d08ff
 80029b8:	431bde83 	.word	0x431bde83
 80029bc:	10624dd3 	.word	0x10624dd3

080029c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029da:	f7ff fbe1 	bl	80021a0 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	f040 80d9 	bne.w	8002ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2319      	movs	r3, #25
 80029f4:	2201      	movs	r2, #1
 80029f6:	496d      	ldr	r1, [pc, #436]	@ (8002bac <HAL_I2C_Mem_Write+0x1ec>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fc8b 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0cc      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Mem_Write+0x56>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0c5      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d007      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2221      	movs	r2, #33	@ 0x21
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2240      	movs	r2, #64	@ 0x40
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8002a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a7e:	88f8      	ldrh	r0, [r7, #6]
 8002a80:	893a      	ldrh	r2, [r7, #8]
 8002a82:	8979      	ldrh	r1, [r7, #10]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fac2 	bl	8003018 <I2C_RequestMemoryWrite>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d052      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e081      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fd50 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d107      	bne.n	8002ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06b      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d11b      	bne.n	8002b40 <HAL_I2C_Mem_Write+0x180>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d017      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1aa      	bne.n	8002a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fd43 	bl	80035d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e016      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	00100002 	.word	0x00100002
 8002bb0:	ffff0000 	.word	0xffff0000

08002bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	@ 0x30
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bce:	f7ff fae7 	bl	80021a0 <HAL_GetTick>
 8002bd2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	f040 8214 	bne.w	800300a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2319      	movs	r3, #25
 8002be8:	2201      	movs	r2, #1
 8002bea:	497b      	ldr	r1, [pc, #492]	@ (8002dd8 <HAL_I2C_Mem_Read+0x224>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fb91 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e207      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Mem_Read+0x56>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e200      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d007      	beq.n	8002c30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2222      	movs	r2, #34	@ 0x22
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2240      	movs	r2, #64	@ 0x40
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ddc <HAL_I2C_Mem_Read+0x228>)
 8002c70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c72:	88f8      	ldrh	r0, [r7, #6]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	8979      	ldrh	r1, [r7, #10]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4603      	mov	r3, r0
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fa5e 	bl	8003144 <I2C_RequestMemoryRead>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1bc      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d113      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e190      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d11b      	bne.n	8002d02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e170      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d11b      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	e150      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d58:	e144      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	f200 80f1 	bhi.w	8002f46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d123      	bne.n	8002db4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fc79 	bl	8003668 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e145      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002db2:	e117      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d14e      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	4906      	ldr	r1, [pc, #24]	@ (8002de0 <HAL_I2C_Mem_Read+0x22c>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 faa4 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e11a      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
 8002dd6:	bf00      	nop
 8002dd8:	00100002 	.word	0x00100002
 8002ddc:	ffff0000 	.word	0xffff0000
 8002de0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e58:	e0c4      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e60:	2200      	movs	r2, #0
 8002e62:	496c      	ldr	r1, [pc, #432]	@ (8003014 <HAL_I2C_Mem_Read+0x460>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fa55 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0cb      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4955      	ldr	r1, [pc, #340]	@ (8003014 <HAL_I2C_Mem_Read+0x460>)
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fa27 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e09d      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f44:	e04e      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fb8c 	bl	8003668 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e058      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d124      	bne.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d107      	bne.n	8002fb2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f aeb6 	bne.w	8002d5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
  }
}
 800300c:	4618      	mov	r0, r3
 800300e:	3728      	adds	r7, #40	@ 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	00010004 	.word	0x00010004

08003018 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	817b      	strh	r3, [r7, #10]
 800302a:	460b      	mov	r3, r1
 800302c:	813b      	strh	r3, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003040:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2200      	movs	r2, #0
 800304a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f960 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003068:	d103      	bne.n	8003072 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003070:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e05f      	b.n	8003136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003076:	897b      	ldrh	r3, [r7, #10]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003084:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	492d      	ldr	r1, [pc, #180]	@ (8003140 <I2C_RequestMemoryWrite+0x128>)
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f9bb 	bl	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e04c      	b.n	8003136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fa46 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d107      	bne.n	80030da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e02b      	b.n	8003136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e4:	893b      	ldrh	r3, [r7, #8]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	611a      	str	r2, [r3, #16]
 80030ee:	e021      	b.n	8003134 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030f0:	893b      	ldrh	r3, [r7, #8]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa20 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	2b04      	cmp	r3, #4
 8003114:	d107      	bne.n	8003126 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003124:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e005      	b.n	8003136 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800312a:	893b      	ldrh	r3, [r7, #8]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	00010002 	.word	0x00010002

08003144 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	460b      	mov	r3, r1
 8003158:	813b      	strh	r3, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800316c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800317c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	2200      	movs	r2, #0
 8003186:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f8c2 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031a4:	d103      	bne.n	80031ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0aa      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031b2:	897b      	ldrh	r3, [r7, #10]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	4952      	ldr	r1, [pc, #328]	@ (8003310 <I2C_RequestMemoryRead+0x1cc>)
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f91d 	bl	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e097      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f0:	6a39      	ldr	r1, [r7, #32]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f9a8 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00d      	beq.n	800321a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	2b04      	cmp	r3, #4
 8003204:	d107      	bne.n	8003216 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003214:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e076      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	611a      	str	r2, [r3, #16]
 800322a:	e021      	b.n	8003270 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	b29b      	uxth	r3, r3
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323c:	6a39      	ldr	r1, [r7, #32]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f982 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	2b04      	cmp	r3, #4
 8003250:	d107      	bne.n	8003262 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003260:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e050      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003266:	893b      	ldrh	r3, [r7, #8]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003272:	6a39      	ldr	r1, [r7, #32]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f967 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	2b04      	cmp	r3, #4
 8003286:	d107      	bne.n	8003298 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003296:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e035      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f82b 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d2:	d103      	bne.n	80032dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e013      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032e0:	897b      	ldrh	r3, [r7, #10]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	4906      	ldr	r1, [pc, #24]	@ (8003310 <I2C_RequestMemoryRead+0x1cc>)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f886 	bl	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	00010002 	.word	0x00010002

08003314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003324:	e048      	b.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d044      	beq.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe ff37 	bl	80021a0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d139      	bne.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d10d      	bne.n	800336a <I2C_WaitOnFlagUntilTimeout+0x56>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	e00c      	b.n	8003384 <I2C_WaitOnFlagUntilTimeout+0x70>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	429a      	cmp	r2, r3
 8003388:	d116      	bne.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e023      	b.n	8003400 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	0c1b      	lsrs	r3, r3, #16
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <I2C_WaitOnFlagUntilTimeout+0xca>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	e00c      	b.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d093      	beq.n	8003326 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003416:	e071      	b.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003426:	d123      	bne.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003436:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003440:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e067      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d041      	beq.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003478:	f7fe fe92 	bl	80021a0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d136      	bne.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10c      	bne.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4013      	ands	r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e00b      	b.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d016      	beq.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e021      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d10c      	bne.n	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e00b      	b.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f af6d 	bne.w	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003554:	e034      	b.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8e3 	bl	8003722 <I2C_IsAcknowledgeFailed>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e034      	b.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d028      	beq.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe fe17 	bl	80021a0 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11d      	bne.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358e:	2b80      	cmp	r3, #128	@ 0x80
 8003590:	d016      	beq.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e007      	b.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ca:	2b80      	cmp	r3, #128	@ 0x80
 80035cc:	d1c3      	bne.n	8003556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e4:	e034      	b.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f89b 	bl	8003722 <I2C_IsAcknowledgeFailed>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d028      	beq.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe fdcf 	bl	80021a0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11d      	bne.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d016      	beq.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d1c3      	bne.n	80035e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003674:	e049      	b.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b10      	cmp	r3, #16
 8003682:	d119      	bne.n	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0210 	mvn.w	r2, #16
 800368c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e030      	b.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7fe fd72 	bl	80021a0 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11d      	bne.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d8:	2b40      	cmp	r3, #64	@ 0x40
 80036da:	d016      	beq.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e007      	b.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b40      	cmp	r3, #64	@ 0x40
 8003716:	d1ae      	bne.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003738:	d11b      	bne.n	8003772 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003742:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f043 0204 	orr.w	r2, r3, #4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0cc      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b68      	ldr	r3, [pc, #416]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d90c      	bls.n	80037bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b65      	ldr	r3, [pc, #404]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b63      	ldr	r3, [pc, #396]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0b8      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d020      	beq.n	800380a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d4:	4b59      	ldr	r3, [pc, #356]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a58      	ldr	r2, [pc, #352]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ec:	4b53      	ldr	r3, [pc, #332]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a52      	ldr	r2, [pc, #328]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f8:	4b50      	ldr	r3, [pc, #320]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	494d      	ldr	r1, [pc, #308]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d044      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b47      	ldr	r3, [pc, #284]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d119      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e07f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d003      	beq.n	800383e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	2b03      	cmp	r3, #3
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	4b3f      	ldr	r3, [pc, #252]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e06f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	4b3b      	ldr	r3, [pc, #236]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e067      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4b37      	ldr	r3, [pc, #220]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4934      	ldr	r1, [pc, #208]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003870:	f7fe fc96 	bl	80021a0 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fe fc92 	bl	80021a0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e04f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 020c 	and.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d1eb      	bne.n	8003878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d20c      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b20      	ldr	r3, [pc, #128]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e032      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d4:	4b19      	ldr	r3, [pc, #100]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4916      	ldr	r1, [pc, #88]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	490e      	ldr	r1, [pc, #56]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003906:	f000 f855 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 800390a:	4602      	mov	r2, r0
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	490a      	ldr	r1, [pc, #40]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	5ccb      	ldrb	r3, [r1, r3]
 800391a:	fa22 f303 	lsr.w	r3, r2, r3
 800391e:	4a09      	ldr	r2, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003922:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fbf6 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023c00 	.word	0x40023c00
 800393c:	40023800 	.word	0x40023800
 8003940:	080054d8 	.word	0x080054d8
 8003944:	20000000 	.word	0x20000000
 8003948:	20000004 	.word	0x20000004

0800394c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_RCC_GetHCLKFreq+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000000 	.word	0x20000000

08003964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003968:	f7ff fff0 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	@ (8003988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	080054e8 	.word	0x080054e8

0800398c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003990:	f7ff ffdc 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0b5b      	lsrs	r3, r3, #13
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4903      	ldr	r1, [pc, #12]	@ (80039b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	080054e8 	.word	0x080054e8

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b0a6      	sub	sp, #152	@ 0x98
 80039ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039da:	4bc8      	ldr	r3, [pc, #800]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	f200 817e 	bhi.w	8003ce4 <HAL_RCC_GetSysClockFreq+0x330>
 80039e8:	a201      	add	r2, pc, #4	@ (adr r2, 80039f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a25 	.word	0x08003a25
 80039f4:	08003ce5 	.word	0x08003ce5
 80039f8:	08003ce5 	.word	0x08003ce5
 80039fc:	08003ce5 	.word	0x08003ce5
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003ce5 	.word	0x08003ce5
 8003a08:	08003ce5 	.word	0x08003ce5
 8003a0c:	08003ce5 	.word	0x08003ce5
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003ce5 	.word	0x08003ce5
 8003a18:	08003ce5 	.word	0x08003ce5
 8003a1c:	08003ce5 	.word	0x08003ce5
 8003a20:	08003b9f 	.word	0x08003b9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4bb6      	ldr	r3, [pc, #728]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a2a:	e15f      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a2c:	4bb5      	ldr	r3, [pc, #724]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a32:	e15b      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a34:	4bb1      	ldr	r3, [pc, #708]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a40:	4bae      	ldr	r3, [pc, #696]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d031      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4c:	4bab      	ldr	r3, [pc, #684]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	2200      	movs	r2, #0
 8003a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a60:	2300      	movs	r3, #0
 8003a62:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a64:	4ba7      	ldr	r3, [pc, #668]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a66:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003a6a:	462a      	mov	r2, r5
 8003a6c:	fb03 f202 	mul.w	r2, r3, r2
 8003a70:	2300      	movs	r3, #0
 8003a72:	4621      	mov	r1, r4
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	4aa2      	ldr	r2, [pc, #648]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	fba1 1202 	umull	r1, r2, r1, r2
 8003a82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a84:	460a      	mov	r2, r1
 8003a86:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003a88:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003a8a:	4413      	add	r3, r2
 8003a8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a92:	2200      	movs	r2, #0
 8003a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a96:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a9c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003aa0:	f7fc fc0e 	bl	80002c0 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aae:	e064      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab0:	4b92      	ldr	r3, [pc, #584]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aba:	657a      	str	r2, [r7, #84]	@ 0x54
 8003abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003acc:	4622      	mov	r2, r4
 8003ace:	462b      	mov	r3, r5
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	0159      	lsls	r1, r3, #5
 8003ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ade:	0150      	lsls	r0, r2, #5
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	1a51      	subs	r1, r2, r1
 8003ae8:	6139      	str	r1, [r7, #16]
 8003aea:	4629      	mov	r1, r5
 8003aec:	eb63 0301 	sbc.w	r3, r3, r1
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003afe:	4659      	mov	r1, fp
 8003b00:	018b      	lsls	r3, r1, #6
 8003b02:	4651      	mov	r1, sl
 8003b04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b08:	4651      	mov	r1, sl
 8003b0a:	018a      	lsls	r2, r1, #6
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003b12:	4659      	mov	r1, fp
 8003b14:	eb63 0901 	sbc.w	r9, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	4623      	mov	r3, r4
 8003b32:	eb18 0303 	adds.w	r3, r8, r3
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	462b      	mov	r3, r5
 8003b3a:	eb49 0303 	adc.w	r3, r9, r3
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	028b      	lsls	r3, r1, #10
 8003b50:	4621      	mov	r1, r4
 8003b52:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b56:	4621      	mov	r1, r4
 8003b58:	028a      	lsls	r2, r1, #10
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b62:	2200      	movs	r2, #0
 8003b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b66:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b6c:	f7fc fba8 	bl	80002c0 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b7a:	4b60      	ldr	r3, [pc, #384]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	3301      	adds	r3, #1
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003b8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b9c:	e0a6      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b9e:	4b57      	ldr	r3, [pc, #348]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003baa:	4b54      	ldr	r3, [pc, #336]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02a      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4b51      	ldr	r3, [pc, #324]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4b4e      	ldr	r3, [pc, #312]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bcc:	fb03 f201 	mul.w	r2, r3, r1
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	fb00 f303 	mul.w	r3, r0, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bda:	fba0 1202 	umull	r1, r2, r0, r2
 8003bde:	677a      	str	r2, [r7, #116]	@ 0x74
 8003be0:	460a      	mov	r2, r1
 8003be2:	673a      	str	r2, [r7, #112]	@ 0x70
 8003be4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003be6:	4413      	add	r3, r2
 8003be8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bee:	2200      	movs	r2, #0
 8003bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf2:	637a      	str	r2, [r7, #52]	@ 0x34
 8003bf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003bf8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003bfc:	f7fc fb60 	bl	80002c0 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c0a:	e05b      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	2200      	movs	r2, #0
 8003c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	2300      	movs	r3, #0
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c28:	4642      	mov	r2, r8
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	f04f 0000 	mov.w	r0, #0
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	0159      	lsls	r1, r3, #5
 8003c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3a:	0150      	lsls	r0, r2, #5
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4641      	mov	r1, r8
 8003c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c46:	4649      	mov	r1, r9
 8003c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c60:	ebb2 040a 	subs.w	r4, r2, sl
 8003c64:	eb63 050b 	sbc.w	r5, r3, fp
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	00eb      	lsls	r3, r5, #3
 8003c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c76:	00e2      	lsls	r2, r4, #3
 8003c78:	4614      	mov	r4, r2
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	4643      	mov	r3, r8
 8003c7e:	18e3      	adds	r3, r4, r3
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	464b      	mov	r3, r9
 8003c84:	eb45 0303 	adc.w	r3, r5, r3
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c96:	4629      	mov	r1, r5
 8003c98:	028b      	lsls	r3, r1, #10
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	028a      	lsls	r2, r1, #10
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cac:	2200      	movs	r2, #0
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	61fa      	str	r2, [r7, #28]
 8003cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb6:	f7fc fb03 	bl	80002c0 <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x348>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	0f1b      	lsrs	r3, r3, #28
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003ce2:	e003      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003cea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3798      	adds	r7, #152	@ 0x98
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	017d7840 	.word	0x017d7840

08003d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e28d      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8083 	beq.w	8003e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d28:	4b94      	ldr	r3, [pc, #592]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d019      	beq.n	8003d68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d34:	4b91      	ldr	r3, [pc, #580]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d40:	4b8e      	ldr	r3, [pc, #568]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5a:	4b88      	ldr	r3, [pc, #544]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b84      	ldr	r3, [pc, #528]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x124>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e25a      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x90>
 8003d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xcc>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0xb4>
 8003da2:	4b76      	ldr	r3, [pc, #472]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a75      	ldr	r2, [pc, #468]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b73      	ldr	r3, [pc, #460]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a72      	ldr	r2, [pc, #456]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xcc>
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe f9e0 	bl	80021a0 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe f9dc 	bl	80021a0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e21f      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b61      	ldr	r3, [pc, #388]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xdc>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe f9cc 	bl	80021a0 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe f9c8 	bl	80021a0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e20b      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b57      	ldr	r3, [pc, #348]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x104>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d06f      	beq.n	8003f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e3a:	4b50      	ldr	r3, [pc, #320]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e46:	4b4d      	ldr	r3, [pc, #308]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d105      	bne.n	8003e5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e52:	4b4a      	ldr	r3, [pc, #296]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b47      	ldr	r3, [pc, #284]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b44      	ldr	r3, [pc, #272]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b41      	ldr	r3, [pc, #260]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x186>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1d3      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4937      	ldr	r1, [pc, #220]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e03a      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b34      	ldr	r3, [pc, #208]	@ (8003f80 <HAL_RCC_OscConfig+0x278>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fe f975 	bl	80021a0 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fe f971 	bl	80021a0 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1b4      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b28      	ldr	r3, [pc, #160]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4925      	ldr	r1, [pc, #148]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b24      	ldr	r3, [pc, #144]	@ (8003f80 <HAL_RCC_OscConfig+0x278>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fe f954 	bl	80021a0 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fe f950 	bl	80021a0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e193      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d036      	beq.n	8003f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fe f934 	bl	80021a0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fe f930 	bl	80021a0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e173      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x234>
 8003f5a:	e01b      	b.n	8003f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fe f91d 	bl	80021a0 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	e00e      	b.n	8003f88 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fe f919 	bl	80021a0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d907      	bls.n	8003f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e15c      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	42470000 	.word	0x42470000
 8003f84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	4b8a      	ldr	r3, [pc, #552]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ea      	bne.n	8003f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8097 	beq.w	80040d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa6:	4b83      	ldr	r3, [pc, #524]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	4b79      	ldr	r3, [pc, #484]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fde:	4b76      	ldr	r3, [pc, #472]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fe f8d9 	bl	80021a0 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fe f8d5 	bl	80021a0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e118      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b6c      	ldr	r3, [pc, #432]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x31e>
 8004018:	4b66      	ldr	r3, [pc, #408]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401c:	4a65      	ldr	r2, [pc, #404]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	@ 0x70
 8004024:	e01c      	b.n	8004060 <HAL_RCC_OscConfig+0x358>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x340>
 800402e:	4b61      	ldr	r3, [pc, #388]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	4a60      	ldr	r2, [pc, #384]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	6713      	str	r3, [r2, #112]	@ 0x70
 800403a:	4b5e      	ldr	r3, [pc, #376]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	4a5d      	ldr	r2, [pc, #372]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	@ 0x70
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0x358>
 8004048:	4b5a      	ldr	r3, [pc, #360]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	4a59      	ldr	r2, [pc, #356]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	@ 0x70
 8004054:	4b57      	ldr	r3, [pc, #348]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800405a:	f023 0304 	bic.w	r3, r3, #4
 800405e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fe f89a 	bl	80021a0 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fe f896 	bl	80021a0 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0d7      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	4b4b      	ldr	r3, [pc, #300]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCC_OscConfig+0x368>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fe f884 	bl	80021a0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fe f880 	bl	80021a0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0c1      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b2:	4b40      	ldr	r3, [pc, #256]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ee      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c4:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	4a3a      	ldr	r2, [pc, #232]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80ad 	beq.w	8004234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040da:	4b36      	ldr	r3, [pc, #216]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d060      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d145      	bne.n	800417a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b33      	ldr	r3, [pc, #204]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fe f854 	bl	80021a0 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fe f850 	bl	80021a0 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e093      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b29      	ldr	r3, [pc, #164]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	491b      	ldr	r1, [pc, #108]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fe f825 	bl	80021a0 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fe f821 	bl	80021a0 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e064      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x452>
 8004178:	e05c      	b.n	8004234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe f80e 	bl	80021a0 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe f80a 	bl	80021a0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04d      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x480>
 80041a6:	e045      	b.n	8004234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e040      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004240 <HAL_RCC_OscConfig+0x538>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d030      	beq.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d129      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d122      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d119      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d10f      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800

08004244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e042      	b.n	80042dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd fec0 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	@ 0x24
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f973 	bl	8004574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800429c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	@ 0x28
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d175      	bne.n	80043f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Transmit+0x2c>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e06e      	b.n	80043f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2221      	movs	r2, #33	@ 0x21
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004322:	f7fd ff3d 	bl	80021a0 <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433c:	d108      	bne.n	8004350 <HAL_UART_Transmit+0x6c>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	e003      	b.n	8004358 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004358:	e02e      	b.n	80043b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2200      	movs	r2, #0
 8004362:	2180      	movs	r1, #128	@ 0x80
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f848 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e03a      	b.n	80043f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	3302      	adds	r3, #2
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e007      	b.n	80043aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1cb      	bne.n	800435a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2140      	movs	r1, #64	@ 0x40
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f814 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e006      	b.n	80043f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043f0:	2302      	movs	r3, #2
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440a:	e03b      	b.n	8004484 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d037      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004414:	f7fd fec4 	bl	80021a0 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	6a3a      	ldr	r2, [r7, #32]
 8004420:	429a      	cmp	r2, r3
 8004422:	d302      	bcc.n	800442a <UART_WaitOnFlagUntilTimeout+0x30>
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e03a      	b.n	80044a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d023      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0x8a>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b80      	cmp	r3, #128	@ 0x80
 8004440:	d020      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d01d      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d116      	bne.n	8004484 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f81d 	bl	80044ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2208      	movs	r2, #8
 8004476:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e00f      	b.n	80044a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d0b4      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b095      	sub	sp, #84	@ 0x54
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80044d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3314      	adds	r3, #20
 80044ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004508:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800450a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800450e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	d119      	bne.n	8004558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	60bb      	str	r3, [r7, #8]
   return(result);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 0310 	bic.w	r3, r3, #16
 800453a:	647b      	str	r3, [r7, #68]	@ 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004544:	61ba      	str	r2, [r7, #24]
 8004546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6979      	ldr	r1, [r7, #20]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	613b      	str	r3, [r7, #16]
   return(result);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004566:	bf00      	nop
 8004568:	3754      	adds	r7, #84	@ 0x54
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004578:	b0c0      	sub	sp, #256	@ 0x100
 800457a:	af00      	add	r7, sp, #0
 800457c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	68d9      	ldr	r1, [r3, #12]
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	ea40 0301 	orr.w	r3, r0, r1
 800459c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045cc:	f021 010c 	bic.w	r1, r1, #12
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045da:	430b      	orrs	r3, r1
 80045dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ee:	6999      	ldr	r1, [r3, #24]
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	ea40 0301 	orr.w	r3, r0, r1
 80045fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b8f      	ldr	r3, [pc, #572]	@ (8004840 <UART_SetConfig+0x2cc>)
 8004604:	429a      	cmp	r2, r3
 8004606:	d005      	beq.n	8004614 <UART_SetConfig+0xa0>
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b8d      	ldr	r3, [pc, #564]	@ (8004844 <UART_SetConfig+0x2d0>)
 8004610:	429a      	cmp	r2, r3
 8004612:	d104      	bne.n	800461e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7ff f9ba 	bl	800398c <HAL_RCC_GetPCLK2Freq>
 8004618:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800461c:	e003      	b.n	8004626 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800461e:	f7ff f9a1 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8004622:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004630:	f040 810c 	bne.w	800484c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004638:	2200      	movs	r2, #0
 800463a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800463e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	1891      	adds	r1, r2, r2
 800464c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800464e:	415b      	adcs	r3, r3
 8004650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004656:	4621      	mov	r1, r4
 8004658:	eb12 0801 	adds.w	r8, r2, r1
 800465c:	4629      	mov	r1, r5
 800465e:	eb43 0901 	adc.w	r9, r3, r1
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004676:	4690      	mov	r8, r2
 8004678:	4699      	mov	r9, r3
 800467a:	4623      	mov	r3, r4
 800467c:	eb18 0303 	adds.w	r3, r8, r3
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004684:	462b      	mov	r3, r5
 8004686:	eb49 0303 	adc.w	r3, r9, r3
 800468a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800469a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800469e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046a2:	460b      	mov	r3, r1
 80046a4:	18db      	adds	r3, r3, r3
 80046a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a8:	4613      	mov	r3, r2
 80046aa:	eb42 0303 	adc.w	r3, r2, r3
 80046ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80046b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046b8:	f7fb fe02 	bl	80002c0 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4b61      	ldr	r3, [pc, #388]	@ (8004848 <UART_SetConfig+0x2d4>)
 80046c2:	fba3 2302 	umull	r2, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	011c      	lsls	r4, r3, #4
 80046ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	1891      	adds	r1, r2, r2
 80046e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046e4:	415b      	adcs	r3, r3
 80046e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046ec:	4641      	mov	r1, r8
 80046ee:	eb12 0a01 	adds.w	sl, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb43 0b01 	adc.w	fp, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004704:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800470c:	4692      	mov	sl, r2
 800470e:	469b      	mov	fp, r3
 8004710:	4643      	mov	r3, r8
 8004712:	eb1a 0303 	adds.w	r3, sl, r3
 8004716:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800471a:	464b      	mov	r3, r9
 800471c:	eb4b 0303 	adc.w	r3, fp, r3
 8004720:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004730:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004734:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004738:	460b      	mov	r3, r1
 800473a:	18db      	adds	r3, r3, r3
 800473c:	643b      	str	r3, [r7, #64]	@ 0x40
 800473e:	4613      	mov	r3, r2
 8004740:	eb42 0303 	adc.w	r3, r2, r3
 8004744:	647b      	str	r3, [r7, #68]	@ 0x44
 8004746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800474a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800474e:	f7fb fdb7 	bl	80002c0 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4611      	mov	r1, r2
 8004758:	4b3b      	ldr	r3, [pc, #236]	@ (8004848 <UART_SetConfig+0x2d4>)
 800475a:	fba3 2301 	umull	r2, r3, r3, r1
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2264      	movs	r2, #100	@ 0x64
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	1acb      	subs	r3, r1, r3
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800476e:	4b36      	ldr	r3, [pc, #216]	@ (8004848 <UART_SetConfig+0x2d4>)
 8004770:	fba3 2302 	umull	r2, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800477c:	441c      	add	r4, r3
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004788:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800478c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004798:	415b      	adcs	r3, r3
 800479a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800479c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047d4:	464b      	mov	r3, r9
 80047d6:	460a      	mov	r2, r1
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047f4:	460b      	mov	r3, r1
 80047f6:	18db      	adds	r3, r3, r3
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fa:	4613      	mov	r3, r2
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004806:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800480a:	f7fb fd59 	bl	80002c0 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <UART_SetConfig+0x2d4>)
 8004814:	fba3 1302 	umull	r1, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2164      	movs	r1, #100	@ 0x64
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	3332      	adds	r3, #50	@ 0x32
 8004826:	4a08      	ldr	r2, [pc, #32]	@ (8004848 <UART_SetConfig+0x2d4>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 0207 	and.w	r2, r3, #7
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4422      	add	r2, r4
 800483a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800483c:	e106      	b.n	8004a4c <UART_SetConfig+0x4d8>
 800483e:	bf00      	nop
 8004840:	40011000 	.word	0x40011000
 8004844:	40011400 	.word	0x40011400
 8004848:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004856:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800485a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800485e:	4642      	mov	r2, r8
 8004860:	464b      	mov	r3, r9
 8004862:	1891      	adds	r1, r2, r2
 8004864:	6239      	str	r1, [r7, #32]
 8004866:	415b      	adcs	r3, r3
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
 800486a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800486e:	4641      	mov	r1, r8
 8004870:	1854      	adds	r4, r2, r1
 8004872:	4649      	mov	r1, r9
 8004874:	eb43 0501 	adc.w	r5, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004894:	464b      	mov	r3, r9
 8004896:	eb45 0303 	adc.w	r3, r5, r3
 800489a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048ba:	4629      	mov	r1, r5
 80048bc:	008b      	lsls	r3, r1, #2
 80048be:	4621      	mov	r1, r4
 80048c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c4:	4621      	mov	r1, r4
 80048c6:	008a      	lsls	r2, r1, #2
 80048c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048cc:	f7fb fcf8 	bl	80002c0 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4b60      	ldr	r3, [pc, #384]	@ (8004a58 <UART_SetConfig+0x4e4>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	011c      	lsls	r4, r3, #4
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	61b9      	str	r1, [r7, #24]
 80048f8:	415b      	adcs	r3, r3
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004900:	4641      	mov	r1, r8
 8004902:	1851      	adds	r1, r2, r1
 8004904:	6139      	str	r1, [r7, #16]
 8004906:	4649      	mov	r1, r9
 8004908:	414b      	adcs	r3, r1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004918:	4659      	mov	r1, fp
 800491a:	00cb      	lsls	r3, r1, #3
 800491c:	4651      	mov	r1, sl
 800491e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004922:	4651      	mov	r1, sl
 8004924:	00ca      	lsls	r2, r1, #3
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	4603      	mov	r3, r0
 800492c:	4642      	mov	r2, r8
 800492e:	189b      	adds	r3, r3, r2
 8004930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	67bb      	str	r3, [r7, #120]	@ 0x78
 800494a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004958:	4649      	mov	r1, r9
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	4641      	mov	r1, r8
 800495e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004962:	4641      	mov	r1, r8
 8004964:	008a      	lsls	r2, r1, #2
 8004966:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800496a:	f7fb fca9 	bl	80002c0 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4611      	mov	r1, r2
 8004974:	4b38      	ldr	r3, [pc, #224]	@ (8004a58 <UART_SetConfig+0x4e4>)
 8004976:	fba3 2301 	umull	r2, r3, r3, r1
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2264      	movs	r2, #100	@ 0x64
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	1acb      	subs	r3, r1, r3
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	3332      	adds	r3, #50	@ 0x32
 8004988:	4a33      	ldr	r2, [pc, #204]	@ (8004a58 <UART_SetConfig+0x4e4>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004994:	441c      	add	r4, r3
 8004996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800499a:	2200      	movs	r2, #0
 800499c:	673b      	str	r3, [r7, #112]	@ 0x70
 800499e:	677a      	str	r2, [r7, #116]	@ 0x74
 80049a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	415b      	adcs	r3, r3
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b4:	4641      	mov	r1, r8
 80049b6:	1851      	adds	r1, r2, r1
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049cc:	4659      	mov	r1, fp
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d6:	4651      	mov	r1, sl
 80049d8:	00ca      	lsls	r2, r1, #3
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	4642      	mov	r2, r8
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049e6:	464b      	mov	r3, r9
 80049e8:	460a      	mov	r2, r1
 80049ea:	eb42 0303 	adc.w	r3, r2, r3
 80049ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80049fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a08:	4649      	mov	r1, r9
 8004a0a:	008b      	lsls	r3, r1, #2
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a12:	4641      	mov	r1, r8
 8004a14:	008a      	lsls	r2, r1, #2
 8004a16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a1a:	f7fb fc51 	bl	80002c0 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4b0d      	ldr	r3, [pc, #52]	@ (8004a58 <UART_SetConfig+0x4e4>)
 8004a24:	fba3 1302 	umull	r1, r3, r3, r2
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	2164      	movs	r1, #100	@ 0x64
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	3332      	adds	r3, #50	@ 0x32
 8004a36:	4a08      	ldr	r2, [pc, #32]	@ (8004a58 <UART_SetConfig+0x4e4>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	f003 020f 	and.w	r2, r3, #15
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4422      	add	r2, r4
 8004a4a:	609a      	str	r2, [r3, #8]
}
 8004a4c:	bf00      	nop
 8004a4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a52:	46bd      	mov	sp, r7
 8004a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a58:	51eb851f 	.word	0x51eb851f

08004a5c <siprintf>:
 8004a5c:	b40e      	push	{r1, r2, r3}
 8004a5e:	b510      	push	{r4, lr}
 8004a60:	b09d      	sub	sp, #116	@ 0x74
 8004a62:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004a64:	9002      	str	r0, [sp, #8]
 8004a66:	9006      	str	r0, [sp, #24]
 8004a68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a6c:	480a      	ldr	r0, [pc, #40]	@ (8004a98 <siprintf+0x3c>)
 8004a6e:	9107      	str	r1, [sp, #28]
 8004a70:	9104      	str	r1, [sp, #16]
 8004a72:	490a      	ldr	r1, [pc, #40]	@ (8004a9c <siprintf+0x40>)
 8004a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a78:	9105      	str	r1, [sp, #20]
 8004a7a:	2400      	movs	r4, #0
 8004a7c:	a902      	add	r1, sp, #8
 8004a7e:	6800      	ldr	r0, [r0, #0]
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004a84:	f000 f994 	bl	8004db0 <_svfiprintf_r>
 8004a88:	9b02      	ldr	r3, [sp, #8]
 8004a8a:	701c      	strb	r4, [r3, #0]
 8004a8c:	b01d      	add	sp, #116	@ 0x74
 8004a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a92:	b003      	add	sp, #12
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	2000000c 	.word	0x2000000c
 8004a9c:	ffff0208 	.word	0xffff0208

08004aa0 <memset>:
 8004aa0:	4402      	add	r2, r0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <memset+0xa>
 8004aa8:	4770      	bx	lr
 8004aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004aae:	e7f9      	b.n	8004aa4 <memset+0x4>

08004ab0 <__errno>:
 8004ab0:	4b01      	ldr	r3, [pc, #4]	@ (8004ab8 <__errno+0x8>)
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	2000000c 	.word	0x2000000c

08004abc <__libc_init_array>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	4d0d      	ldr	r5, [pc, #52]	@ (8004af4 <__libc_init_array+0x38>)
 8004ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8004af8 <__libc_init_array+0x3c>)
 8004ac2:	1b64      	subs	r4, r4, r5
 8004ac4:	10a4      	asrs	r4, r4, #2
 8004ac6:	2600      	movs	r6, #0
 8004ac8:	42a6      	cmp	r6, r4
 8004aca:	d109      	bne.n	8004ae0 <__libc_init_array+0x24>
 8004acc:	4d0b      	ldr	r5, [pc, #44]	@ (8004afc <__libc_init_array+0x40>)
 8004ace:	4c0c      	ldr	r4, [pc, #48]	@ (8004b00 <__libc_init_array+0x44>)
 8004ad0:	f000 fc64 	bl	800539c <_init>
 8004ad4:	1b64      	subs	r4, r4, r5
 8004ad6:	10a4      	asrs	r4, r4, #2
 8004ad8:	2600      	movs	r6, #0
 8004ada:	42a6      	cmp	r6, r4
 8004adc:	d105      	bne.n	8004aea <__libc_init_array+0x2e>
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
 8004ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae4:	4798      	blx	r3
 8004ae6:	3601      	adds	r6, #1
 8004ae8:	e7ee      	b.n	8004ac8 <__libc_init_array+0xc>
 8004aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aee:	4798      	blx	r3
 8004af0:	3601      	adds	r6, #1
 8004af2:	e7f2      	b.n	8004ada <__libc_init_array+0x1e>
 8004af4:	0800552c 	.word	0x0800552c
 8004af8:	0800552c 	.word	0x0800552c
 8004afc:	0800552c 	.word	0x0800552c
 8004b00:	08005530 	.word	0x08005530

08004b04 <__retarget_lock_acquire_recursive>:
 8004b04:	4770      	bx	lr

08004b06 <__retarget_lock_release_recursive>:
 8004b06:	4770      	bx	lr

08004b08 <_free_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d041      	beq.n	8004b94 <_free_r+0x8c>
 8004b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b14:	1f0c      	subs	r4, r1, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bfb8      	it	lt
 8004b1a:	18e4      	addlt	r4, r4, r3
 8004b1c:	f000 f8e0 	bl	8004ce0 <__malloc_lock>
 8004b20:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <_free_r+0x90>)
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	b933      	cbnz	r3, 8004b34 <_free_r+0x2c>
 8004b26:	6063      	str	r3, [r4, #4]
 8004b28:	6014      	str	r4, [r2, #0]
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b30:	f000 b8dc 	b.w	8004cec <__malloc_unlock>
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	d908      	bls.n	8004b4a <_free_r+0x42>
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	1821      	adds	r1, r4, r0
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	bf01      	itttt	eq
 8004b40:	6819      	ldreq	r1, [r3, #0]
 8004b42:	685b      	ldreq	r3, [r3, #4]
 8004b44:	1809      	addeq	r1, r1, r0
 8004b46:	6021      	streq	r1, [r4, #0]
 8004b48:	e7ed      	b.n	8004b26 <_free_r+0x1e>
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b10b      	cbz	r3, 8004b54 <_free_r+0x4c>
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d9fa      	bls.n	8004b4a <_free_r+0x42>
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	1850      	adds	r0, r2, r1
 8004b58:	42a0      	cmp	r0, r4
 8004b5a:	d10b      	bne.n	8004b74 <_free_r+0x6c>
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	4401      	add	r1, r0
 8004b60:	1850      	adds	r0, r2, r1
 8004b62:	4283      	cmp	r3, r0
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	d1e0      	bne.n	8004b2a <_free_r+0x22>
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6053      	str	r3, [r2, #4]
 8004b6e:	4408      	add	r0, r1
 8004b70:	6010      	str	r0, [r2, #0]
 8004b72:	e7da      	b.n	8004b2a <_free_r+0x22>
 8004b74:	d902      	bls.n	8004b7c <_free_r+0x74>
 8004b76:	230c      	movs	r3, #12
 8004b78:	602b      	str	r3, [r5, #0]
 8004b7a:	e7d6      	b.n	8004b2a <_free_r+0x22>
 8004b7c:	6820      	ldr	r0, [r4, #0]
 8004b7e:	1821      	adds	r1, r4, r0
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf04      	itt	eq
 8004b84:	6819      	ldreq	r1, [r3, #0]
 8004b86:	685b      	ldreq	r3, [r3, #4]
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	bf04      	itt	eq
 8004b8c:	1809      	addeq	r1, r1, r0
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	6054      	str	r4, [r2, #4]
 8004b92:	e7ca      	b.n	8004b2a <_free_r+0x22>
 8004b94:	bd38      	pop	{r3, r4, r5, pc}
 8004b96:	bf00      	nop
 8004b98:	20002cc4 	.word	0x20002cc4

08004b9c <sbrk_aligned>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8004bdc <sbrk_aligned+0x40>)
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	6831      	ldr	r1, [r6, #0]
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	b911      	cbnz	r1, 8004bae <sbrk_aligned+0x12>
 8004ba8:	f000 fba4 	bl	80052f4 <_sbrk_r>
 8004bac:	6030      	str	r0, [r6, #0]
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 fb9f 	bl	80052f4 <_sbrk_r>
 8004bb6:	1c43      	adds	r3, r0, #1
 8004bb8:	d103      	bne.n	8004bc2 <sbrk_aligned+0x26>
 8004bba:	f04f 34ff 	mov.w	r4, #4294967295
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
 8004bc2:	1cc4      	adds	r4, r0, #3
 8004bc4:	f024 0403 	bic.w	r4, r4, #3
 8004bc8:	42a0      	cmp	r0, r4
 8004bca:	d0f8      	beq.n	8004bbe <sbrk_aligned+0x22>
 8004bcc:	1a21      	subs	r1, r4, r0
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 fb90 	bl	80052f4 <_sbrk_r>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d1f2      	bne.n	8004bbe <sbrk_aligned+0x22>
 8004bd8:	e7ef      	b.n	8004bba <sbrk_aligned+0x1e>
 8004bda:	bf00      	nop
 8004bdc:	20002cc0 	.word	0x20002cc0

08004be0 <_malloc_r>:
 8004be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be4:	1ccd      	adds	r5, r1, #3
 8004be6:	f025 0503 	bic.w	r5, r5, #3
 8004bea:	3508      	adds	r5, #8
 8004bec:	2d0c      	cmp	r5, #12
 8004bee:	bf38      	it	cc
 8004bf0:	250c      	movcc	r5, #12
 8004bf2:	2d00      	cmp	r5, #0
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	db01      	blt.n	8004bfc <_malloc_r+0x1c>
 8004bf8:	42a9      	cmp	r1, r5
 8004bfa:	d904      	bls.n	8004c06 <_malloc_r+0x26>
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	6033      	str	r3, [r6, #0]
 8004c00:	2000      	movs	r0, #0
 8004c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004cdc <_malloc_r+0xfc>
 8004c0a:	f000 f869 	bl	8004ce0 <__malloc_lock>
 8004c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c12:	461c      	mov	r4, r3
 8004c14:	bb44      	cbnz	r4, 8004c68 <_malloc_r+0x88>
 8004c16:	4629      	mov	r1, r5
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f7ff ffbf 	bl	8004b9c <sbrk_aligned>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	4604      	mov	r4, r0
 8004c22:	d158      	bne.n	8004cd6 <_malloc_r+0xf6>
 8004c24:	f8d8 4000 	ldr.w	r4, [r8]
 8004c28:	4627      	mov	r7, r4
 8004c2a:	2f00      	cmp	r7, #0
 8004c2c:	d143      	bne.n	8004cb6 <_malloc_r+0xd6>
 8004c2e:	2c00      	cmp	r4, #0
 8004c30:	d04b      	beq.n	8004cca <_malloc_r+0xea>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	4639      	mov	r1, r7
 8004c36:	4630      	mov	r0, r6
 8004c38:	eb04 0903 	add.w	r9, r4, r3
 8004c3c:	f000 fb5a 	bl	80052f4 <_sbrk_r>
 8004c40:	4581      	cmp	r9, r0
 8004c42:	d142      	bne.n	8004cca <_malloc_r+0xea>
 8004c44:	6821      	ldr	r1, [r4, #0]
 8004c46:	1a6d      	subs	r5, r5, r1
 8004c48:	4629      	mov	r1, r5
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f7ff ffa6 	bl	8004b9c <sbrk_aligned>
 8004c50:	3001      	adds	r0, #1
 8004c52:	d03a      	beq.n	8004cca <_malloc_r+0xea>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	442b      	add	r3, r5
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	bb62      	cbnz	r2, 8004cbc <_malloc_r+0xdc>
 8004c62:	f8c8 7000 	str.w	r7, [r8]
 8004c66:	e00f      	b.n	8004c88 <_malloc_r+0xa8>
 8004c68:	6822      	ldr	r2, [r4, #0]
 8004c6a:	1b52      	subs	r2, r2, r5
 8004c6c:	d420      	bmi.n	8004cb0 <_malloc_r+0xd0>
 8004c6e:	2a0b      	cmp	r2, #11
 8004c70:	d917      	bls.n	8004ca2 <_malloc_r+0xc2>
 8004c72:	1961      	adds	r1, r4, r5
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	6025      	str	r5, [r4, #0]
 8004c78:	bf18      	it	ne
 8004c7a:	6059      	strne	r1, [r3, #4]
 8004c7c:	6863      	ldr	r3, [r4, #4]
 8004c7e:	bf08      	it	eq
 8004c80:	f8c8 1000 	streq.w	r1, [r8]
 8004c84:	5162      	str	r2, [r4, r5]
 8004c86:	604b      	str	r3, [r1, #4]
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f000 f82f 	bl	8004cec <__malloc_unlock>
 8004c8e:	f104 000b 	add.w	r0, r4, #11
 8004c92:	1d23      	adds	r3, r4, #4
 8004c94:	f020 0007 	bic.w	r0, r0, #7
 8004c98:	1ac2      	subs	r2, r0, r3
 8004c9a:	bf1c      	itt	ne
 8004c9c:	1a1b      	subne	r3, r3, r0
 8004c9e:	50a3      	strne	r3, [r4, r2]
 8004ca0:	e7af      	b.n	8004c02 <_malloc_r+0x22>
 8004ca2:	6862      	ldr	r2, [r4, #4]
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	bf0c      	ite	eq
 8004ca8:	f8c8 2000 	streq.w	r2, [r8]
 8004cac:	605a      	strne	r2, [r3, #4]
 8004cae:	e7eb      	b.n	8004c88 <_malloc_r+0xa8>
 8004cb0:	4623      	mov	r3, r4
 8004cb2:	6864      	ldr	r4, [r4, #4]
 8004cb4:	e7ae      	b.n	8004c14 <_malloc_r+0x34>
 8004cb6:	463c      	mov	r4, r7
 8004cb8:	687f      	ldr	r7, [r7, #4]
 8004cba:	e7b6      	b.n	8004c2a <_malloc_r+0x4a>
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	42a3      	cmp	r3, r4
 8004cc2:	d1fb      	bne.n	8004cbc <_malloc_r+0xdc>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6053      	str	r3, [r2, #4]
 8004cc8:	e7de      	b.n	8004c88 <_malloc_r+0xa8>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	6033      	str	r3, [r6, #0]
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f000 f80c 	bl	8004cec <__malloc_unlock>
 8004cd4:	e794      	b.n	8004c00 <_malloc_r+0x20>
 8004cd6:	6005      	str	r5, [r0, #0]
 8004cd8:	e7d6      	b.n	8004c88 <_malloc_r+0xa8>
 8004cda:	bf00      	nop
 8004cdc:	20002cc4 	.word	0x20002cc4

08004ce0 <__malloc_lock>:
 8004ce0:	4801      	ldr	r0, [pc, #4]	@ (8004ce8 <__malloc_lock+0x8>)
 8004ce2:	f7ff bf0f 	b.w	8004b04 <__retarget_lock_acquire_recursive>
 8004ce6:	bf00      	nop
 8004ce8:	20002cbc 	.word	0x20002cbc

08004cec <__malloc_unlock>:
 8004cec:	4801      	ldr	r0, [pc, #4]	@ (8004cf4 <__malloc_unlock+0x8>)
 8004cee:	f7ff bf0a 	b.w	8004b06 <__retarget_lock_release_recursive>
 8004cf2:	bf00      	nop
 8004cf4:	20002cbc 	.word	0x20002cbc

08004cf8 <__ssputs_r>:
 8004cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfc:	688e      	ldr	r6, [r1, #8]
 8004cfe:	461f      	mov	r7, r3
 8004d00:	42be      	cmp	r6, r7
 8004d02:	680b      	ldr	r3, [r1, #0]
 8004d04:	4682      	mov	sl, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	4690      	mov	r8, r2
 8004d0a:	d82d      	bhi.n	8004d68 <__ssputs_r+0x70>
 8004d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d14:	d026      	beq.n	8004d64 <__ssputs_r+0x6c>
 8004d16:	6965      	ldr	r5, [r4, #20]
 8004d18:	6909      	ldr	r1, [r1, #16]
 8004d1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d1e:	eba3 0901 	sub.w	r9, r3, r1
 8004d22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d26:	1c7b      	adds	r3, r7, #1
 8004d28:	444b      	add	r3, r9
 8004d2a:	106d      	asrs	r5, r5, #1
 8004d2c:	429d      	cmp	r5, r3
 8004d2e:	bf38      	it	cc
 8004d30:	461d      	movcc	r5, r3
 8004d32:	0553      	lsls	r3, r2, #21
 8004d34:	d527      	bpl.n	8004d86 <__ssputs_r+0x8e>
 8004d36:	4629      	mov	r1, r5
 8004d38:	f7ff ff52 	bl	8004be0 <_malloc_r>
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	b360      	cbz	r0, 8004d9a <__ssputs_r+0xa2>
 8004d40:	6921      	ldr	r1, [r4, #16]
 8004d42:	464a      	mov	r2, r9
 8004d44:	f000 fae6 	bl	8005314 <memcpy>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d52:	81a3      	strh	r3, [r4, #12]
 8004d54:	6126      	str	r6, [r4, #16]
 8004d56:	6165      	str	r5, [r4, #20]
 8004d58:	444e      	add	r6, r9
 8004d5a:	eba5 0509 	sub.w	r5, r5, r9
 8004d5e:	6026      	str	r6, [r4, #0]
 8004d60:	60a5      	str	r5, [r4, #8]
 8004d62:	463e      	mov	r6, r7
 8004d64:	42be      	cmp	r6, r7
 8004d66:	d900      	bls.n	8004d6a <__ssputs_r+0x72>
 8004d68:	463e      	mov	r6, r7
 8004d6a:	6820      	ldr	r0, [r4, #0]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	4641      	mov	r1, r8
 8004d70:	f000 faa6 	bl	80052c0 <memmove>
 8004d74:	68a3      	ldr	r3, [r4, #8]
 8004d76:	1b9b      	subs	r3, r3, r6
 8004d78:	60a3      	str	r3, [r4, #8]
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	4433      	add	r3, r6
 8004d7e:	6023      	str	r3, [r4, #0]
 8004d80:	2000      	movs	r0, #0
 8004d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d86:	462a      	mov	r2, r5
 8004d88:	f000 fad2 	bl	8005330 <_realloc_r>
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d1e0      	bne.n	8004d54 <__ssputs_r+0x5c>
 8004d92:	6921      	ldr	r1, [r4, #16]
 8004d94:	4650      	mov	r0, sl
 8004d96:	f7ff feb7 	bl	8004b08 <_free_r>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	f8ca 3000 	str.w	r3, [sl]
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004da6:	81a3      	strh	r3, [r4, #12]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	e7e9      	b.n	8004d82 <__ssputs_r+0x8a>
	...

08004db0 <_svfiprintf_r>:
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	4698      	mov	r8, r3
 8004db6:	898b      	ldrh	r3, [r1, #12]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	b09d      	sub	sp, #116	@ 0x74
 8004dbc:	4607      	mov	r7, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	d510      	bpl.n	8004de6 <_svfiprintf_r+0x36>
 8004dc4:	690b      	ldr	r3, [r1, #16]
 8004dc6:	b973      	cbnz	r3, 8004de6 <_svfiprintf_r+0x36>
 8004dc8:	2140      	movs	r1, #64	@ 0x40
 8004dca:	f7ff ff09 	bl	8004be0 <_malloc_r>
 8004dce:	6028      	str	r0, [r5, #0]
 8004dd0:	6128      	str	r0, [r5, #16]
 8004dd2:	b930      	cbnz	r0, 8004de2 <_svfiprintf_r+0x32>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	b01d      	add	sp, #116	@ 0x74
 8004dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de2:	2340      	movs	r3, #64	@ 0x40
 8004de4:	616b      	str	r3, [r5, #20]
 8004de6:	2300      	movs	r3, #0
 8004de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dea:	2320      	movs	r3, #32
 8004dec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004df4:	2330      	movs	r3, #48	@ 0x30
 8004df6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f94 <_svfiprintf_r+0x1e4>
 8004dfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dfe:	f04f 0901 	mov.w	r9, #1
 8004e02:	4623      	mov	r3, r4
 8004e04:	469a      	mov	sl, r3
 8004e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e0a:	b10a      	cbz	r2, 8004e10 <_svfiprintf_r+0x60>
 8004e0c:	2a25      	cmp	r2, #37	@ 0x25
 8004e0e:	d1f9      	bne.n	8004e04 <_svfiprintf_r+0x54>
 8004e10:	ebba 0b04 	subs.w	fp, sl, r4
 8004e14:	d00b      	beq.n	8004e2e <_svfiprintf_r+0x7e>
 8004e16:	465b      	mov	r3, fp
 8004e18:	4622      	mov	r2, r4
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	f7ff ff6b 	bl	8004cf8 <__ssputs_r>
 8004e22:	3001      	adds	r0, #1
 8004e24:	f000 80a7 	beq.w	8004f76 <_svfiprintf_r+0x1c6>
 8004e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e2a:	445a      	add	r2, fp
 8004e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 809f 	beq.w	8004f76 <_svfiprintf_r+0x1c6>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e42:	f10a 0a01 	add.w	sl, sl, #1
 8004e46:	9304      	str	r3, [sp, #16]
 8004e48:	9307      	str	r3, [sp, #28]
 8004e4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e50:	4654      	mov	r4, sl
 8004e52:	2205      	movs	r2, #5
 8004e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e58:	484e      	ldr	r0, [pc, #312]	@ (8004f94 <_svfiprintf_r+0x1e4>)
 8004e5a:	f7fb f9e1 	bl	8000220 <memchr>
 8004e5e:	9a04      	ldr	r2, [sp, #16]
 8004e60:	b9d8      	cbnz	r0, 8004e9a <_svfiprintf_r+0xea>
 8004e62:	06d0      	lsls	r0, r2, #27
 8004e64:	bf44      	itt	mi
 8004e66:	2320      	movmi	r3, #32
 8004e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e6c:	0711      	lsls	r1, r2, #28
 8004e6e:	bf44      	itt	mi
 8004e70:	232b      	movmi	r3, #43	@ 0x2b
 8004e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e76:	f89a 3000 	ldrb.w	r3, [sl]
 8004e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e7c:	d015      	beq.n	8004eaa <_svfiprintf_r+0xfa>
 8004e7e:	9a07      	ldr	r2, [sp, #28]
 8004e80:	4654      	mov	r4, sl
 8004e82:	2000      	movs	r0, #0
 8004e84:	f04f 0c0a 	mov.w	ip, #10
 8004e88:	4621      	mov	r1, r4
 8004e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e8e:	3b30      	subs	r3, #48	@ 0x30
 8004e90:	2b09      	cmp	r3, #9
 8004e92:	d94b      	bls.n	8004f2c <_svfiprintf_r+0x17c>
 8004e94:	b1b0      	cbz	r0, 8004ec4 <_svfiprintf_r+0x114>
 8004e96:	9207      	str	r2, [sp, #28]
 8004e98:	e014      	b.n	8004ec4 <_svfiprintf_r+0x114>
 8004e9a:	eba0 0308 	sub.w	r3, r0, r8
 8004e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	9304      	str	r3, [sp, #16]
 8004ea6:	46a2      	mov	sl, r4
 8004ea8:	e7d2      	b.n	8004e50 <_svfiprintf_r+0xa0>
 8004eaa:	9b03      	ldr	r3, [sp, #12]
 8004eac:	1d19      	adds	r1, r3, #4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	9103      	str	r1, [sp, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bfbb      	ittet	lt
 8004eb6:	425b      	neglt	r3, r3
 8004eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8004ebc:	9307      	strge	r3, [sp, #28]
 8004ebe:	9307      	strlt	r3, [sp, #28]
 8004ec0:	bfb8      	it	lt
 8004ec2:	9204      	strlt	r2, [sp, #16]
 8004ec4:	7823      	ldrb	r3, [r4, #0]
 8004ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ec8:	d10a      	bne.n	8004ee0 <_svfiprintf_r+0x130>
 8004eca:	7863      	ldrb	r3, [r4, #1]
 8004ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ece:	d132      	bne.n	8004f36 <_svfiprintf_r+0x186>
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	1d1a      	adds	r2, r3, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	9203      	str	r2, [sp, #12]
 8004ed8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004edc:	3402      	adds	r4, #2
 8004ede:	9305      	str	r3, [sp, #20]
 8004ee0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004fa4 <_svfiprintf_r+0x1f4>
 8004ee4:	7821      	ldrb	r1, [r4, #0]
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	4650      	mov	r0, sl
 8004eea:	f7fb f999 	bl	8000220 <memchr>
 8004eee:	b138      	cbz	r0, 8004f00 <_svfiprintf_r+0x150>
 8004ef0:	9b04      	ldr	r3, [sp, #16]
 8004ef2:	eba0 000a 	sub.w	r0, r0, sl
 8004ef6:	2240      	movs	r2, #64	@ 0x40
 8004ef8:	4082      	lsls	r2, r0
 8004efa:	4313      	orrs	r3, r2
 8004efc:	3401      	adds	r4, #1
 8004efe:	9304      	str	r3, [sp, #16]
 8004f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f04:	4824      	ldr	r0, [pc, #144]	@ (8004f98 <_svfiprintf_r+0x1e8>)
 8004f06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f0a:	2206      	movs	r2, #6
 8004f0c:	f7fb f988 	bl	8000220 <memchr>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d036      	beq.n	8004f82 <_svfiprintf_r+0x1d2>
 8004f14:	4b21      	ldr	r3, [pc, #132]	@ (8004f9c <_svfiprintf_r+0x1ec>)
 8004f16:	bb1b      	cbnz	r3, 8004f60 <_svfiprintf_r+0x1b0>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	3307      	adds	r3, #7
 8004f1c:	f023 0307 	bic.w	r3, r3, #7
 8004f20:	3308      	adds	r3, #8
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f26:	4433      	add	r3, r6
 8004f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f2a:	e76a      	b.n	8004e02 <_svfiprintf_r+0x52>
 8004f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f30:	460c      	mov	r4, r1
 8004f32:	2001      	movs	r0, #1
 8004f34:	e7a8      	b.n	8004e88 <_svfiprintf_r+0xd8>
 8004f36:	2300      	movs	r3, #0
 8004f38:	3401      	adds	r4, #1
 8004f3a:	9305      	str	r3, [sp, #20]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f04f 0c0a 	mov.w	ip, #10
 8004f42:	4620      	mov	r0, r4
 8004f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f48:	3a30      	subs	r2, #48	@ 0x30
 8004f4a:	2a09      	cmp	r2, #9
 8004f4c:	d903      	bls.n	8004f56 <_svfiprintf_r+0x1a6>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0c6      	beq.n	8004ee0 <_svfiprintf_r+0x130>
 8004f52:	9105      	str	r1, [sp, #20]
 8004f54:	e7c4      	b.n	8004ee0 <_svfiprintf_r+0x130>
 8004f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e7f0      	b.n	8004f42 <_svfiprintf_r+0x192>
 8004f60:	ab03      	add	r3, sp, #12
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	462a      	mov	r2, r5
 8004f66:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <_svfiprintf_r+0x1f0>)
 8004f68:	a904      	add	r1, sp, #16
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	f3af 8000 	nop.w
 8004f70:	1c42      	adds	r2, r0, #1
 8004f72:	4606      	mov	r6, r0
 8004f74:	d1d6      	bne.n	8004f24 <_svfiprintf_r+0x174>
 8004f76:	89ab      	ldrh	r3, [r5, #12]
 8004f78:	065b      	lsls	r3, r3, #25
 8004f7a:	f53f af2d 	bmi.w	8004dd8 <_svfiprintf_r+0x28>
 8004f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f80:	e72c      	b.n	8004ddc <_svfiprintf_r+0x2c>
 8004f82:	ab03      	add	r3, sp, #12
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	462a      	mov	r2, r5
 8004f88:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <_svfiprintf_r+0x1f0>)
 8004f8a:	a904      	add	r1, sp, #16
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	f000 f879 	bl	8005084 <_printf_i>
 8004f92:	e7ed      	b.n	8004f70 <_svfiprintf_r+0x1c0>
 8004f94:	080054f0 	.word	0x080054f0
 8004f98:	080054fa 	.word	0x080054fa
 8004f9c:	00000000 	.word	0x00000000
 8004fa0:	08004cf9 	.word	0x08004cf9
 8004fa4:	080054f6 	.word	0x080054f6

08004fa8 <_printf_common>:
 8004fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	4616      	mov	r6, r2
 8004fae:	4698      	mov	r8, r3
 8004fb0:	688a      	ldr	r2, [r1, #8]
 8004fb2:	690b      	ldr	r3, [r1, #16]
 8004fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	bfb8      	it	lt
 8004fbc:	4613      	movlt	r3, r2
 8004fbe:	6033      	str	r3, [r6, #0]
 8004fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	b10a      	cbz	r2, 8004fce <_printf_common+0x26>
 8004fca:	3301      	adds	r3, #1
 8004fcc:	6033      	str	r3, [r6, #0]
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	0699      	lsls	r1, r3, #26
 8004fd2:	bf42      	ittt	mi
 8004fd4:	6833      	ldrmi	r3, [r6, #0]
 8004fd6:	3302      	addmi	r3, #2
 8004fd8:	6033      	strmi	r3, [r6, #0]
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	f015 0506 	ands.w	r5, r5, #6
 8004fe0:	d106      	bne.n	8004ff0 <_printf_common+0x48>
 8004fe2:	f104 0a19 	add.w	sl, r4, #25
 8004fe6:	68e3      	ldr	r3, [r4, #12]
 8004fe8:	6832      	ldr	r2, [r6, #0]
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	42ab      	cmp	r3, r5
 8004fee:	dc26      	bgt.n	800503e <_printf_common+0x96>
 8004ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	3b00      	subs	r3, #0
 8004ff8:	bf18      	it	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	0692      	lsls	r2, r2, #26
 8004ffe:	d42b      	bmi.n	8005058 <_printf_common+0xb0>
 8005000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005004:	4641      	mov	r1, r8
 8005006:	4638      	mov	r0, r7
 8005008:	47c8      	blx	r9
 800500a:	3001      	adds	r0, #1
 800500c:	d01e      	beq.n	800504c <_printf_common+0xa4>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	6922      	ldr	r2, [r4, #16]
 8005012:	f003 0306 	and.w	r3, r3, #6
 8005016:	2b04      	cmp	r3, #4
 8005018:	bf02      	ittt	eq
 800501a:	68e5      	ldreq	r5, [r4, #12]
 800501c:	6833      	ldreq	r3, [r6, #0]
 800501e:	1aed      	subeq	r5, r5, r3
 8005020:	68a3      	ldr	r3, [r4, #8]
 8005022:	bf0c      	ite	eq
 8005024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005028:	2500      	movne	r5, #0
 800502a:	4293      	cmp	r3, r2
 800502c:	bfc4      	itt	gt
 800502e:	1a9b      	subgt	r3, r3, r2
 8005030:	18ed      	addgt	r5, r5, r3
 8005032:	2600      	movs	r6, #0
 8005034:	341a      	adds	r4, #26
 8005036:	42b5      	cmp	r5, r6
 8005038:	d11a      	bne.n	8005070 <_printf_common+0xc8>
 800503a:	2000      	movs	r0, #0
 800503c:	e008      	b.n	8005050 <_printf_common+0xa8>
 800503e:	2301      	movs	r3, #1
 8005040:	4652      	mov	r2, sl
 8005042:	4641      	mov	r1, r8
 8005044:	4638      	mov	r0, r7
 8005046:	47c8      	blx	r9
 8005048:	3001      	adds	r0, #1
 800504a:	d103      	bne.n	8005054 <_printf_common+0xac>
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005054:	3501      	adds	r5, #1
 8005056:	e7c6      	b.n	8004fe6 <_printf_common+0x3e>
 8005058:	18e1      	adds	r1, r4, r3
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	2030      	movs	r0, #48	@ 0x30
 800505e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005062:	4422      	add	r2, r4
 8005064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800506c:	3302      	adds	r3, #2
 800506e:	e7c7      	b.n	8005000 <_printf_common+0x58>
 8005070:	2301      	movs	r3, #1
 8005072:	4622      	mov	r2, r4
 8005074:	4641      	mov	r1, r8
 8005076:	4638      	mov	r0, r7
 8005078:	47c8      	blx	r9
 800507a:	3001      	adds	r0, #1
 800507c:	d0e6      	beq.n	800504c <_printf_common+0xa4>
 800507e:	3601      	adds	r6, #1
 8005080:	e7d9      	b.n	8005036 <_printf_common+0x8e>
	...

08005084 <_printf_i>:
 8005084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	7e0f      	ldrb	r7, [r1, #24]
 800508a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800508c:	2f78      	cmp	r7, #120	@ 0x78
 800508e:	4691      	mov	r9, r2
 8005090:	4680      	mov	r8, r0
 8005092:	460c      	mov	r4, r1
 8005094:	469a      	mov	sl, r3
 8005096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800509a:	d807      	bhi.n	80050ac <_printf_i+0x28>
 800509c:	2f62      	cmp	r7, #98	@ 0x62
 800509e:	d80a      	bhi.n	80050b6 <_printf_i+0x32>
 80050a0:	2f00      	cmp	r7, #0
 80050a2:	f000 80d1 	beq.w	8005248 <_printf_i+0x1c4>
 80050a6:	2f58      	cmp	r7, #88	@ 0x58
 80050a8:	f000 80b8 	beq.w	800521c <_printf_i+0x198>
 80050ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050b4:	e03a      	b.n	800512c <_printf_i+0xa8>
 80050b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050ba:	2b15      	cmp	r3, #21
 80050bc:	d8f6      	bhi.n	80050ac <_printf_i+0x28>
 80050be:	a101      	add	r1, pc, #4	@ (adr r1, 80050c4 <_printf_i+0x40>)
 80050c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050c4:	0800511d 	.word	0x0800511d
 80050c8:	08005131 	.word	0x08005131
 80050cc:	080050ad 	.word	0x080050ad
 80050d0:	080050ad 	.word	0x080050ad
 80050d4:	080050ad 	.word	0x080050ad
 80050d8:	080050ad 	.word	0x080050ad
 80050dc:	08005131 	.word	0x08005131
 80050e0:	080050ad 	.word	0x080050ad
 80050e4:	080050ad 	.word	0x080050ad
 80050e8:	080050ad 	.word	0x080050ad
 80050ec:	080050ad 	.word	0x080050ad
 80050f0:	0800522f 	.word	0x0800522f
 80050f4:	0800515b 	.word	0x0800515b
 80050f8:	080051e9 	.word	0x080051e9
 80050fc:	080050ad 	.word	0x080050ad
 8005100:	080050ad 	.word	0x080050ad
 8005104:	08005251 	.word	0x08005251
 8005108:	080050ad 	.word	0x080050ad
 800510c:	0800515b 	.word	0x0800515b
 8005110:	080050ad 	.word	0x080050ad
 8005114:	080050ad 	.word	0x080050ad
 8005118:	080051f1 	.word	0x080051f1
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	1d1a      	adds	r2, r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6032      	str	r2, [r6, #0]
 8005124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800512c:	2301      	movs	r3, #1
 800512e:	e09c      	b.n	800526a <_printf_i+0x1e6>
 8005130:	6833      	ldr	r3, [r6, #0]
 8005132:	6820      	ldr	r0, [r4, #0]
 8005134:	1d19      	adds	r1, r3, #4
 8005136:	6031      	str	r1, [r6, #0]
 8005138:	0606      	lsls	r6, r0, #24
 800513a:	d501      	bpl.n	8005140 <_printf_i+0xbc>
 800513c:	681d      	ldr	r5, [r3, #0]
 800513e:	e003      	b.n	8005148 <_printf_i+0xc4>
 8005140:	0645      	lsls	r5, r0, #25
 8005142:	d5fb      	bpl.n	800513c <_printf_i+0xb8>
 8005144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005148:	2d00      	cmp	r5, #0
 800514a:	da03      	bge.n	8005154 <_printf_i+0xd0>
 800514c:	232d      	movs	r3, #45	@ 0x2d
 800514e:	426d      	negs	r5, r5
 8005150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005154:	4858      	ldr	r0, [pc, #352]	@ (80052b8 <_printf_i+0x234>)
 8005156:	230a      	movs	r3, #10
 8005158:	e011      	b.n	800517e <_printf_i+0xfa>
 800515a:	6821      	ldr	r1, [r4, #0]
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	0608      	lsls	r0, r1, #24
 8005160:	f853 5b04 	ldr.w	r5, [r3], #4
 8005164:	d402      	bmi.n	800516c <_printf_i+0xe8>
 8005166:	0649      	lsls	r1, r1, #25
 8005168:	bf48      	it	mi
 800516a:	b2ad      	uxthmi	r5, r5
 800516c:	2f6f      	cmp	r7, #111	@ 0x6f
 800516e:	4852      	ldr	r0, [pc, #328]	@ (80052b8 <_printf_i+0x234>)
 8005170:	6033      	str	r3, [r6, #0]
 8005172:	bf14      	ite	ne
 8005174:	230a      	movne	r3, #10
 8005176:	2308      	moveq	r3, #8
 8005178:	2100      	movs	r1, #0
 800517a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800517e:	6866      	ldr	r6, [r4, #4]
 8005180:	60a6      	str	r6, [r4, #8]
 8005182:	2e00      	cmp	r6, #0
 8005184:	db05      	blt.n	8005192 <_printf_i+0x10e>
 8005186:	6821      	ldr	r1, [r4, #0]
 8005188:	432e      	orrs	r6, r5
 800518a:	f021 0104 	bic.w	r1, r1, #4
 800518e:	6021      	str	r1, [r4, #0]
 8005190:	d04b      	beq.n	800522a <_printf_i+0x1a6>
 8005192:	4616      	mov	r6, r2
 8005194:	fbb5 f1f3 	udiv	r1, r5, r3
 8005198:	fb03 5711 	mls	r7, r3, r1, r5
 800519c:	5dc7      	ldrb	r7, [r0, r7]
 800519e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051a2:	462f      	mov	r7, r5
 80051a4:	42bb      	cmp	r3, r7
 80051a6:	460d      	mov	r5, r1
 80051a8:	d9f4      	bls.n	8005194 <_printf_i+0x110>
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d10b      	bne.n	80051c6 <_printf_i+0x142>
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	07df      	lsls	r7, r3, #31
 80051b2:	d508      	bpl.n	80051c6 <_printf_i+0x142>
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	6861      	ldr	r1, [r4, #4]
 80051b8:	4299      	cmp	r1, r3
 80051ba:	bfde      	ittt	le
 80051bc:	2330      	movle	r3, #48	@ 0x30
 80051be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051c6:	1b92      	subs	r2, r2, r6
 80051c8:	6122      	str	r2, [r4, #16]
 80051ca:	f8cd a000 	str.w	sl, [sp]
 80051ce:	464b      	mov	r3, r9
 80051d0:	aa03      	add	r2, sp, #12
 80051d2:	4621      	mov	r1, r4
 80051d4:	4640      	mov	r0, r8
 80051d6:	f7ff fee7 	bl	8004fa8 <_printf_common>
 80051da:	3001      	adds	r0, #1
 80051dc:	d14a      	bne.n	8005274 <_printf_i+0x1f0>
 80051de:	f04f 30ff 	mov.w	r0, #4294967295
 80051e2:	b004      	add	sp, #16
 80051e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	f043 0320 	orr.w	r3, r3, #32
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	4832      	ldr	r0, [pc, #200]	@ (80052bc <_printf_i+0x238>)
 80051f2:	2778      	movs	r7, #120	@ 0x78
 80051f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	6831      	ldr	r1, [r6, #0]
 80051fc:	061f      	lsls	r7, r3, #24
 80051fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005202:	d402      	bmi.n	800520a <_printf_i+0x186>
 8005204:	065f      	lsls	r7, r3, #25
 8005206:	bf48      	it	mi
 8005208:	b2ad      	uxthmi	r5, r5
 800520a:	6031      	str	r1, [r6, #0]
 800520c:	07d9      	lsls	r1, r3, #31
 800520e:	bf44      	itt	mi
 8005210:	f043 0320 	orrmi.w	r3, r3, #32
 8005214:	6023      	strmi	r3, [r4, #0]
 8005216:	b11d      	cbz	r5, 8005220 <_printf_i+0x19c>
 8005218:	2310      	movs	r3, #16
 800521a:	e7ad      	b.n	8005178 <_printf_i+0xf4>
 800521c:	4826      	ldr	r0, [pc, #152]	@ (80052b8 <_printf_i+0x234>)
 800521e:	e7e9      	b.n	80051f4 <_printf_i+0x170>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	f023 0320 	bic.w	r3, r3, #32
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	e7f6      	b.n	8005218 <_printf_i+0x194>
 800522a:	4616      	mov	r6, r2
 800522c:	e7bd      	b.n	80051aa <_printf_i+0x126>
 800522e:	6833      	ldr	r3, [r6, #0]
 8005230:	6825      	ldr	r5, [r4, #0]
 8005232:	6961      	ldr	r1, [r4, #20]
 8005234:	1d18      	adds	r0, r3, #4
 8005236:	6030      	str	r0, [r6, #0]
 8005238:	062e      	lsls	r6, r5, #24
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	d501      	bpl.n	8005242 <_printf_i+0x1be>
 800523e:	6019      	str	r1, [r3, #0]
 8005240:	e002      	b.n	8005248 <_printf_i+0x1c4>
 8005242:	0668      	lsls	r0, r5, #25
 8005244:	d5fb      	bpl.n	800523e <_printf_i+0x1ba>
 8005246:	8019      	strh	r1, [r3, #0]
 8005248:	2300      	movs	r3, #0
 800524a:	6123      	str	r3, [r4, #16]
 800524c:	4616      	mov	r6, r2
 800524e:	e7bc      	b.n	80051ca <_printf_i+0x146>
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	1d1a      	adds	r2, r3, #4
 8005254:	6032      	str	r2, [r6, #0]
 8005256:	681e      	ldr	r6, [r3, #0]
 8005258:	6862      	ldr	r2, [r4, #4]
 800525a:	2100      	movs	r1, #0
 800525c:	4630      	mov	r0, r6
 800525e:	f7fa ffdf 	bl	8000220 <memchr>
 8005262:	b108      	cbz	r0, 8005268 <_printf_i+0x1e4>
 8005264:	1b80      	subs	r0, r0, r6
 8005266:	6060      	str	r0, [r4, #4]
 8005268:	6863      	ldr	r3, [r4, #4]
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	2300      	movs	r3, #0
 800526e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005272:	e7aa      	b.n	80051ca <_printf_i+0x146>
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	4632      	mov	r2, r6
 8005278:	4649      	mov	r1, r9
 800527a:	4640      	mov	r0, r8
 800527c:	47d0      	blx	sl
 800527e:	3001      	adds	r0, #1
 8005280:	d0ad      	beq.n	80051de <_printf_i+0x15a>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	079b      	lsls	r3, r3, #30
 8005286:	d413      	bmi.n	80052b0 <_printf_i+0x22c>
 8005288:	68e0      	ldr	r0, [r4, #12]
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	4298      	cmp	r0, r3
 800528e:	bfb8      	it	lt
 8005290:	4618      	movlt	r0, r3
 8005292:	e7a6      	b.n	80051e2 <_printf_i+0x15e>
 8005294:	2301      	movs	r3, #1
 8005296:	4632      	mov	r2, r6
 8005298:	4649      	mov	r1, r9
 800529a:	4640      	mov	r0, r8
 800529c:	47d0      	blx	sl
 800529e:	3001      	adds	r0, #1
 80052a0:	d09d      	beq.n	80051de <_printf_i+0x15a>
 80052a2:	3501      	adds	r5, #1
 80052a4:	68e3      	ldr	r3, [r4, #12]
 80052a6:	9903      	ldr	r1, [sp, #12]
 80052a8:	1a5b      	subs	r3, r3, r1
 80052aa:	42ab      	cmp	r3, r5
 80052ac:	dcf2      	bgt.n	8005294 <_printf_i+0x210>
 80052ae:	e7eb      	b.n	8005288 <_printf_i+0x204>
 80052b0:	2500      	movs	r5, #0
 80052b2:	f104 0619 	add.w	r6, r4, #25
 80052b6:	e7f5      	b.n	80052a4 <_printf_i+0x220>
 80052b8:	08005501 	.word	0x08005501
 80052bc:	08005512 	.word	0x08005512

080052c0 <memmove>:
 80052c0:	4288      	cmp	r0, r1
 80052c2:	b510      	push	{r4, lr}
 80052c4:	eb01 0402 	add.w	r4, r1, r2
 80052c8:	d902      	bls.n	80052d0 <memmove+0x10>
 80052ca:	4284      	cmp	r4, r0
 80052cc:	4623      	mov	r3, r4
 80052ce:	d807      	bhi.n	80052e0 <memmove+0x20>
 80052d0:	1e43      	subs	r3, r0, #1
 80052d2:	42a1      	cmp	r1, r4
 80052d4:	d008      	beq.n	80052e8 <memmove+0x28>
 80052d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052de:	e7f8      	b.n	80052d2 <memmove+0x12>
 80052e0:	4402      	add	r2, r0
 80052e2:	4601      	mov	r1, r0
 80052e4:	428a      	cmp	r2, r1
 80052e6:	d100      	bne.n	80052ea <memmove+0x2a>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052f2:	e7f7      	b.n	80052e4 <memmove+0x24>

080052f4 <_sbrk_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d06      	ldr	r5, [pc, #24]	@ (8005310 <_sbrk_r+0x1c>)
 80052f8:	2300      	movs	r3, #0
 80052fa:	4604      	mov	r4, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	f7fc fde0 	bl	8001ec4 <_sbrk>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_sbrk_r+0x1a>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_sbrk_r+0x1a>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	20002cb8 	.word	0x20002cb8

08005314 <memcpy>:
 8005314:	440a      	add	r2, r1
 8005316:	4291      	cmp	r1, r2
 8005318:	f100 33ff 	add.w	r3, r0, #4294967295
 800531c:	d100      	bne.n	8005320 <memcpy+0xc>
 800531e:	4770      	bx	lr
 8005320:	b510      	push	{r4, lr}
 8005322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800532a:	4291      	cmp	r1, r2
 800532c:	d1f9      	bne.n	8005322 <memcpy+0xe>
 800532e:	bd10      	pop	{r4, pc}

08005330 <_realloc_r>:
 8005330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005334:	4607      	mov	r7, r0
 8005336:	4614      	mov	r4, r2
 8005338:	460d      	mov	r5, r1
 800533a:	b921      	cbnz	r1, 8005346 <_realloc_r+0x16>
 800533c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005340:	4611      	mov	r1, r2
 8005342:	f7ff bc4d 	b.w	8004be0 <_malloc_r>
 8005346:	b92a      	cbnz	r2, 8005354 <_realloc_r+0x24>
 8005348:	f7ff fbde 	bl	8004b08 <_free_r>
 800534c:	4625      	mov	r5, r4
 800534e:	4628      	mov	r0, r5
 8005350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005354:	f000 f81a 	bl	800538c <_malloc_usable_size_r>
 8005358:	4284      	cmp	r4, r0
 800535a:	4606      	mov	r6, r0
 800535c:	d802      	bhi.n	8005364 <_realloc_r+0x34>
 800535e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005362:	d8f4      	bhi.n	800534e <_realloc_r+0x1e>
 8005364:	4621      	mov	r1, r4
 8005366:	4638      	mov	r0, r7
 8005368:	f7ff fc3a 	bl	8004be0 <_malloc_r>
 800536c:	4680      	mov	r8, r0
 800536e:	b908      	cbnz	r0, 8005374 <_realloc_r+0x44>
 8005370:	4645      	mov	r5, r8
 8005372:	e7ec      	b.n	800534e <_realloc_r+0x1e>
 8005374:	42b4      	cmp	r4, r6
 8005376:	4622      	mov	r2, r4
 8005378:	4629      	mov	r1, r5
 800537a:	bf28      	it	cs
 800537c:	4632      	movcs	r2, r6
 800537e:	f7ff ffc9 	bl	8005314 <memcpy>
 8005382:	4629      	mov	r1, r5
 8005384:	4638      	mov	r0, r7
 8005386:	f7ff fbbf 	bl	8004b08 <_free_r>
 800538a:	e7f1      	b.n	8005370 <_realloc_r+0x40>

0800538c <_malloc_usable_size_r>:
 800538c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005390:	1f18      	subs	r0, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	bfbc      	itt	lt
 8005396:	580b      	ldrlt	r3, [r1, r0]
 8005398:	18c0      	addlt	r0, r0, r3
 800539a:	4770      	bx	lr

0800539c <_init>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	bf00      	nop
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr

080053a8 <_fini>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr
